/*
 * StudentPanel.java
 *
 * Created on 14/06/2013, 13:59:28
 */
package Interface;

import dsproject.Aluno;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Günther
 */
public class StudentPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    public StudentPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        createStudent = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        labelBirthday = new javax.swing.JLabel();
        labelGender = new javax.swing.JLabel();
        labelAddress = new javax.swing.JLabel();
        labelCity = new javax.swing.JLabel();
        labelState = new javax.swing.JLabel();
        labelMotherName = new javax.swing.JLabel();
        labelFatherName = new javax.swing.JLabel();
        labelTelephone = new javax.swing.JLabel();
        labelMobile = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        birthday = new com.toedter.calendar.JDateChooser();
        gender = new javax.swing.JComboBox();
        address = new javax.swing.JTextField();
        city = new javax.swing.JTextField();
        state = new javax.swing.JTextField();
        motherName = new javax.swing.JTextField();
        fatherName = new javax.swing.JTextField();
        telephone = new javax.swing.JTextField();
        mobile = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        editStudent = new javax.swing.JPanel();
        labelNome = new javax.swing.JLabel();
        labelNomeDoPai = new javax.swing.JLabel();
        labelNomeDaMae = new javax.swing.JLabel();
        labelEndereco = new javax.swing.JLabel();
        labelTelefone = new javax.swing.JLabel();
        labelCelular = new javax.swing.JLabel();
        labelDataDeNascimento = new javax.swing.JLabel();
        labelE_mail = new javax.swing.JLabel();
        campoNomeDaMae = new javax.swing.JTextField();
        campoNomeDoPai = new javax.swing.JTextField();
        campoTelefone = new javax.swing.JTextField();
        campoEndereco = new javax.swing.JTextField();
        campoCelular = new javax.swing.JTextField();
        campoEmail = new javax.swing.JTextField();
        comboNome = new javax.swing.JComboBox();
        saveStudent = new javax.swing.JButton();
        labelGenero = new javax.swing.JLabel();
        comboGenero = new javax.swing.JComboBox();
        labelCidade = new javax.swing.JLabel();
        labelEstado = new javax.swing.JLabel();
        campoCidade = new javax.swing.JTextField();
        campoEstado = new javax.swing.JTextField();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        deleteStudent = new javax.swing.JPanel();
        studentCombo = new javax.swing.JComboBox();
        deleteButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(833, 515));

        createStudent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelName.setText("Nome Completo");
        createStudent.add(labelName, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 45, -1, -1));

        labelBirthday.setText("Data de Nascimento");
        createStudent.add(labelBirthday, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 150, 20));

        labelGender.setText("Gênero");
        createStudent.add(labelGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 111, -1, -1));

        labelAddress.setText("Endereço");
        createStudent.add(labelAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 144, -1, -1));

        labelCity.setText("Cidade");
        createStudent.add(labelCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 177, -1, -1));

        labelState.setText("Estado");
        createStudent.add(labelState, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 210, -1, -1));

        labelMotherName.setText("Nome Completo da Mãe");
        createStudent.add(labelMotherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 243, -1, -1));

        labelFatherName.setText("Nome Completo do Pai");
        createStudent.add(labelFatherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 277, -1, 14));

        labelTelephone.setText("Telefone");
        createStudent.add(labelTelephone, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 309, -1, -1));

        labelMobile.setText("Celular");
        createStudent.add(labelMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 342, -1, -1));

        labelEmail.setText("E-mail");
        createStudent.add(labelEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 376, -1, -1));

        name.setToolTipText("teste");
        createStudent.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 40, 396, -1));
        createStudent.add(birthday, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 73, 396, -1));

        gender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino", "Outro" }));
        createStudent.add(gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 106, 396, -1));
        createStudent.add(address, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 139, 396, -1));
        createStudent.add(city, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 172, 396, -1));
        createStudent.add(state, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 205, 396, -1));
        createStudent.add(motherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 238, 396, -1));
        createStudent.add(fatherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 271, 396, -1));
        createStudent.add(telephone, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 304, 396, -1));
        createStudent.add(mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 337, 396, -1));
        createStudent.add(email, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 371, 396, -1));

        createButton.setText("Cadastrar");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        createStudent.add(createButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 417, 90, -1));

        jTabbedPane1.addTab("Cadastrar Aluno", createStudent);

        editStudent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelNome.setText("Nome Completo");
        editStudent.add(labelNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 45, -1, -1));

        labelNomeDoPai.setText("Nome Completo do Pai");
        editStudent.add(labelNomeDoPai, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 277, -1, 14));

        labelNomeDaMae.setText("Nome Completo da Mãe");
        editStudent.add(labelNomeDaMae, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 243, -1, -1));

        labelEndereco.setText("Endereço");
        editStudent.add(labelEndereco, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 144, -1, -1));

        labelTelefone.setText("Telefone");
        editStudent.add(labelTelefone, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 309, -1, -1));

        labelCelular.setText("Celular");
        editStudent.add(labelCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 342, -1, -1));

        labelDataDeNascimento.setText("Data de Nascimento");
        editStudent.add(labelDataDeNascimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 83, -1, -1));

        labelE_mail.setText("E-mail");
        editStudent.add(labelE_mail, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 376, -1, -1));
        editStudent.add(campoNomeDaMae, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 238, 396, -1));
        editStudent.add(campoNomeDoPai, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 271, 396, -1));
        editStudent.add(campoTelefone, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 304, 396, -1));
        editStudent.add(campoEndereco, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 139, 396, -1));
        editStudent.add(campoCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 337, 396, -1));
        editStudent.add(campoEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 371, 396, -1));

        comboNome.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                comboNomePopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboNome.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboNomeItemStateChanged(evt);
            }
        });
        editStudent.add(comboNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 40, 396, -1));

        saveStudent.setText("Salvar");
        editStudent.add(saveStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 416, 90, -1));

        labelGenero.setText("Gênero");
        editStudent.add(labelGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 111, -1, -1));

        comboGenero.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino", "Outro" }));
        editStudent.add(comboGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 106, 396, -1));

        labelCidade.setText("Cidade");
        editStudent.add(labelCidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 177, -1, -1));

        labelEstado.setText("Estado");
        editStudent.add(labelEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 210, -1, -1));
        editStudent.add(campoCidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 172, 396, -1));
        editStudent.add(campoEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 205, 396, -1));

        jDateChooser2.setPreferredSize(new java.awt.Dimension(396, 27));
        editStudent.add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 73, 396, -1));

        jTabbedPane1.addTab("Editar Informações do Aluno", editStudent);

        deleteStudent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelChooseStudent.setText("Selecione um Aluno");
        deleteStudent.add(labelChooseStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 45, -1, -1));

        studentCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                studentComboPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        deleteStudent.add(studentCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 536, -1));

        deleteButton.setText("Excluir");
        deleteStudent.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(666, 80, 90, -1));

        jTabbedPane1.addTab("Excluir Cadastro do Aluno", deleteStudent);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

   private void createButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_createButtonActionPerformed
   {//GEN-HEADEREND:event_createButtonActionPerformed
       flag = false;
       String nameNewStudent = getNameStudent();
       Date newBirthday = getBirthday();
       String newGender = getGender();
       String newAddress = getAddress();
       String newCity = getCity();
       String newState = getState();
       String newMotherName = getMotherName();
       String newFatherName = getFatherName();
       String newTelephone = getTelephone();
       String newMobile = getMobile();
       String newEmail = getEmail();

       if (!flag) {
           Aluno student = new Aluno(nameNewStudent, newBirthday, newGender, newAddress, newCity, newState, newMotherName, newFatherName, newTelephone, newMobile, newEmail);
           
           ArrayList<dsproject.Aluno> students;
           ObjectInputStream in;
           ObjectOutputStream out;
           
           try {
               File arquivoAlunos = new File("alunos.txt");
               if (arquivoAlunos.exists()) {
                   FileInputStream arquivo = new FileInputStream(arquivoAlunos);
                   in = new ObjectInputStream(arquivo);
                   students = (ArrayList<Aluno>) in.readObject();
               } else {
                   students = new ArrayList<>();
               }
               
               students.add(student);
               out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
               out.writeObject(students);
               out.close();
               
               JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
           } catch (IOException | ClassNotFoundException | HeadlessException e) {
               JOptionPane.showMessageDialog(null, "Falha ao salvar aluno", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
               System.out.println(e.toString());
           }
           
           clearNewStudent();
       }
   }//GEN-LAST:event_createButtonActionPerformed

    private String getNameStudent() {
        if (name.getText().isEmpty()) {
            labelName.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelName.setForeground(Color.black);
        return name.getText();
    }

    private Date getBirthday() {
        if (birthday.getDate() == null) {
            labelBirthday.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelBirthday.setForeground(Color.black);
        return birthday.getDate();
    }

    private String getGender() {
        return gender.getSelectedItem().toString();
    }

    private String getAddress() {
        if (address.getText().isEmpty()) {
            labelAddress.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelAddress.setForeground(Color.black);
        return address.getText();
    }

    private String getCity() {
        if (city.getText().isEmpty()) {
            labelCity.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelCity.setForeground(Color.black);
        return city.getText();
    }

    private String getState() {
        if (state.getText().isEmpty()) {
            labelState.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelState.setForeground(Color.black);
        return state.getText();
    }

    private String getMotherName() {
        if (motherName.getText().isEmpty()) {
            labelMotherName.setForeground(Color.red);
            flag = true;
            return null;
        }

        labelMotherName.setForeground(Color.black);
        return motherName.getText();
    }

    private String getFatherName() {
        if (fatherName.getText().isEmpty()) {
            labelFatherName.setForeground(Color.red);
            flag = true;
            return null;
        }
        labelFatherName.setForeground(Color.black);
        return fatherName.getText();

    }

    private String getTelephone() {
        return telephone.getText();
    }

    private String getMobile() {
        return mobile.getText();
    }

    private String getEmail() {
        return email.getText();
    }

   private void comboNomePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboNomePopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboNomePopupMenuWillBecomeVisible
       Object isNull;
       isNull = comboNome.getItemAt(0);
       int i = 0;
       ArrayList<dsproject.Aluno> students;
       ObjectInputStream in;
       if (isStudentAddedComboStudent() && isNull == null) {
           //daqui até o catch le um objeto gravado no arquivo alunos.txt
           File fileStudents = new File("alunos.txt");
           if (fileStudents.exists()) {
               FileInputStream file;
               try {
                   file = new FileInputStream(fileStudents);
                   in = new ObjectInputStream(file);
                   students = (ArrayList<dsproject.Aluno>) in.readObject();
                   i = 0;
                   comboNome.addItem("");
                   while (i < students.size()) {
                       comboNome.addItem(students.get(i).getNome());
                       i++;
                   }
               } catch (IOException | ClassNotFoundException ex) {
                   System.err.println(ex);
               }

           }
           setStudentAddedComboStudent(false);
           setNumeroDeAlunosAdicionadosComboStudent(0);
       } else {
           if (isStudentAddedComboStudent() && isNull != null) {
               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if (fileStudents.exists()) {
                   FileInputStream file;
                   try {
                       file = new FileInputStream(fileStudents);
                       in = new ObjectInputStream(file);
                       students = (ArrayList<Aluno>) in.readObject();
                       i = (students.size() - getNumeroDeAlunosAdicionadosComboStudent());
                       while (i < students.size()) {
                           comboNome.addItem(students.get(i).getNome());
                           i++;
                       }
                   } catch (IOException | ClassNotFoundException ex) {
                       System.err.println(ex);
                   }

               }
               setStudentAddedComboStudent(false);
               setNumeroDeAlunosAdicionadosComboStudent(0);
           } else {
               if (isNull == null) {
                   i = 0;

                   //daqui até o catch le um objeto gravado no arquivo alunos.txt
                   File fileStudents = new File("alunos.txt");
                   if (fileStudents.exists()) {
                       FileInputStream file;
                       try {
                           file = new FileInputStream(fileStudents);
                           in = new ObjectInputStream(file);
                           students = (ArrayList<Aluno>) in.readObject();
                           comboNome.addItem("");
                           while (i < students.size()) {
                               comboNome.addItem(students.get(i).getNome());
                               i++;
                           }
                       } catch (IOException | ClassNotFoundException ex) {
                           System.err.println(ex);
                       }
                   }
               }
           }
       }
   }//GEN-LAST:event_comboNomePopupMenuWillBecomeVisible

   private void studentComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_studentComboPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_studentComboPopupMenuWillBecomeVisible
       Object isNull;
       isNull = studentCombo.getItemAt(0);
       int i = 0;
       ArrayList<Aluno> students = null;
       ObjectInputStream in;
       if (isStudentAddedComboName() && isNull == null) {
           //daqui até o catch le um objeto gravado no arquivo alunos.txt
           File fileStudents = new File("alunos.txt");
           if (fileStudents.exists()) {
               FileInputStream file;
               try {
                   file = new FileInputStream(fileStudents);
                   in = new ObjectInputStream(file);
                   students = (ArrayList<Aluno>) in.readObject();
                   i = 0;
                   studentCombo.addItem("");
                   while (i < students.size()) {
                       studentCombo.addItem(students.get(i).getNome());
                       i++;
                   }
               } catch (IOException | ClassNotFoundException ex) {
                   System.err.println(ex);
               }

           }
           setStudentAddedComboName(false);
           setNumeroDeAlunosAdicionadosComboName(0);
       } else {
           if (isStudentAddedComboName() && isNull != null) {
               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if (fileStudents.exists()) {
                   FileInputStream file;
                   try {
                       file = new FileInputStream(fileStudents);
                       in = new ObjectInputStream(file);
                       students = (ArrayList<Aluno>) in.readObject();
                       i = (students.size() - getNumeroDeAlunosAdicionadosComboName());
                       while (i < students.size()) {
                           studentCombo.addItem(students.get(i).getNome());
                           i++;
                       }
                   } catch (IOException | ClassNotFoundException ex) {
                       System.err.println(ex);
                   }

               }
               setStudentAddedComboName(false);
               setNumeroDeAlunosAdicionadosComboName(0);
           } else {
               if (isNull == null) {
                   i = 0;

                   //daqui até o catch le um objeto gravado no arquivo alunos.txt
                   File fileStudents = new File("alunos.txt");
                   if (fileStudents.exists()) {
                       FileInputStream file;
                       try {
                           file = new FileInputStream(fileStudents);
                           in = new ObjectInputStream(file);
                           students = (ArrayList<Aluno>) in.readObject();
                           studentCombo.addItem("");
                           while (i < students.size()) {
                               studentCombo.addItem(students.get(i).getNome());
                               i++;
                           }
                       } catch (IOException | ClassNotFoundException ex) {
                           System.err.println(ex);
                       }
                   }
               }
           }
       }
   }//GEN-LAST:event_studentComboPopupMenuWillBecomeVisible

   private void comboNomeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_comboNomeItemStateChanged
   {//GEN-HEADEREND:event_comboNomeItemStateChanged
       if (evt.getStateChange() == 1) {
           if (evt.getItem().equals("")) {
               System.out.println("espaço em branco");
               clearEditStudent();
           } else {
               int i = 0;
               ArrayList<Aluno> students = null;
               ObjectInputStream in;
               SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
               File fileStudents = new File("alunos.txt");
               if (fileStudents.exists()) {
                   FileInputStream file;
                   try {
                       file = new FileInputStream(fileStudents);
                       in = new ObjectInputStream(file);
                       students = (ArrayList<Aluno>) in.readObject();
                       for (i = 0; i < students.size(); i++) {
                           if (students.get(i).getNome().equals(evt.getItem().toString())) {
                               //campoDataDeNascimento.setText(sd.format(students.get(i).getDataDeNascimento()).toString());
                               comboGenero.setSelectedItem(students.get(i).getGenero());
                               campoEndereco.setText(students.get(i).getEndereco());
                               campoCidade.setText(students.get(i).getCidade());
                               campoEstado.setText(students.get(i).getEstado());
                               campoNomeDaMae.setText(students.get(i).getNomeDaMae());
                               campoNomeDoPai.setText(students.get(i).getNomeDoPai());
                               campoTelefone.setText(students.get(i).getTelefone());
                               campoCelular.setText(students.get(i).getCelular());
                               campoEmail.setText(students.get(i).getEmail());
                           }
                       }
                   } catch (IOException | ClassNotFoundException ex) {
                       System.err.println(ex);
                   }
               }
           }
       }
   }//GEN-LAST:event_comboNomeItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField address;
    private com.toedter.calendar.JDateChooser birthday;
    private javax.swing.JTextField campoCelular;
    private javax.swing.JTextField campoCidade;
    private javax.swing.JTextField campoEmail;
    private javax.swing.JTextField campoEndereco;
    private javax.swing.JTextField campoEstado;
    private javax.swing.JTextField campoNomeDaMae;
    private javax.swing.JTextField campoNomeDoPai;
    private javax.swing.JTextField campoTelefone;
    private static javax.swing.JTextField city;
    private javax.swing.JComboBox comboGenero;
    private javax.swing.JComboBox comboNome;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel createStudent;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel deleteStudent;
    private javax.swing.JPanel editStudent;
    private static javax.swing.JTextField email;
    private static javax.swing.JTextField fatherName;
    private static javax.swing.JComboBox gender;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JLabel labelAddress;
    private static javax.swing.JLabel labelBirthday;
    private javax.swing.JLabel labelCelular;
    private final javax.swing.JLabel labelChooseStudent = new javax.swing.JLabel();
    private javax.swing.JLabel labelCidade;
    private static javax.swing.JLabel labelCity;
    private javax.swing.JLabel labelDataDeNascimento;
    private javax.swing.JLabel labelE_mail;
    private static javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelEndereco;
    private javax.swing.JLabel labelEstado;
    private static javax.swing.JLabel labelFatherName;
    private static javax.swing.JLabel labelGender;
    private javax.swing.JLabel labelGenero;
    private static javax.swing.JLabel labelMobile;
    private static javax.swing.JLabel labelMotherName;
    private static javax.swing.JLabel labelName;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelNomeDaMae;
    private javax.swing.JLabel labelNomeDoPai;
    private static javax.swing.JLabel labelState;
    private javax.swing.JLabel labelTelefone;
    private static javax.swing.JLabel labelTelephone;
    private static javax.swing.JTextField mobile;
    private static javax.swing.JTextField motherName;
    private static javax.swing.JTextField name;
    private javax.swing.JButton saveStudent;
    private static javax.swing.JTextField state;
    private static javax.swing.JComboBox studentCombo;
    private static javax.swing.JTextField telephone;
    // End of variables declaration//GEN-END:variables
    private boolean flag;
    private static boolean studentAddedComboStudent;
    private static boolean studentAddedComboName;
    private int numeroDeAlunosAdicionadosComboStudent = 0;
    private int numeroDeAlunosAdicionadosComboName = 0;

    public int getNumeroDeAlunosAdicionadosComboStudent() {
        return numeroDeAlunosAdicionadosComboStudent;
    }

    public void setNumeroDeAlunosAdicionadosComboStudent(int numeroDeAlunosAdicionadosComboStudent) {
        this.numeroDeAlunosAdicionadosComboStudent = numeroDeAlunosAdicionadosComboStudent;
    }

    public int getNumeroDeAlunosAdicionadosComboName() {
        return numeroDeAlunosAdicionadosComboName;
    }

    public void setNumeroDeAlunosAdicionadosComboName(int numeroDeAlunosAdicionadosComboName) {
        this.numeroDeAlunosAdicionadosComboName = numeroDeAlunosAdicionadosComboName;
    }

    public static boolean isStudentAddedComboStudent() {
        return studentAddedComboStudent;
    }

    public static void setStudentAddedComboStudent(boolean studentAdded) {
        //createStudent.studentAddedComboStudent = studentAdded;
    }

    public static boolean isStudentAddedComboName() {
        return studentAddedComboName;
    }

    public static void setStudentAddedComboName(boolean studentAddedComboName) {
        //createStudent.studentAddedComboName = studentAddedComboName;
    }

    public void clearNewStudent() {
        name.setText("");
        address.setText("");
        mobile.setText("");
        city.setText("");
        birthday.setDate(null);
        email.setText("");
        fatherName.setText("");
        motherName.setText("");
        state.setText("");
        telephone.setText("");
    }

    public void clearEditStudent() {
        campoCelular.setText("");
        campoCidade.setText("");
        //campoDataDeNascimento.setText("");
        campoEmail.setText("");
        campoEndereco.setText("");
        campoEstado.setText("");
        campoNomeDaMae.setText("");
        campoNomeDoPai.setText("");
        campoTelefone.setText("");
    }
}
