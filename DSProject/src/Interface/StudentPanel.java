/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentPanel.java
 *
 * Created on 14/06/2013, 13:59:28
 */
package Interface;

import dsproject.Aluno;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Günther
 */
public class StudentPanel extends javax.swing.JPanel {

    /** Creates new form StudentPanel */
    public StudentPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jTabbedPane1 = new javax.swing.JTabbedPane();
      newStudentPanel = new javax.swing.JPanel();
      labelNomeCompleto = new javax.swing.JLabel();
      labelDataDeNascimentoCadastrarAluno = new javax.swing.JLabel();
      labelNomeDoPaiCadastrarAluno = new javax.swing.JLabel();
      labelNomeDaMaeCadastrarAluno = new javax.swing.JLabel();
      labelEnderecoCadastrarAluno = new javax.swing.JLabel();
      labelTelefoneCadastrarAluno = new javax.swing.JLabel();
      labelCelularCadastrarAluno = new javax.swing.JLabel();
      labelEmailCadastrarAluno = new javax.swing.JLabel();
      campoNomeCompleto = new javax.swing.JTextField();
      campoNomeDaMaeCadastrarAluno = new javax.swing.JTextField();
      campoNomeDoPaiCadastrarAluno = new javax.swing.JTextField();
      campoTelefoneCadastrarAluno = new javax.swing.JTextField();
      campoEnderecoCadastrarAluno = new javax.swing.JTextField();
      campoCelularCadastrarAluno = new javax.swing.JTextField();
      campoEmailCadastrarAluno = new javax.swing.JTextField();
      botaoCadastrar = new javax.swing.JButton();
      campoDataDeNascimentoCadastrarAluno = new javax.swing.JTextField();
      labelGeneroCadastrarAluno = new javax.swing.JLabel();
      comboGeneroCadastrarAluno = new javax.swing.JComboBox();
      labelCidadeCadastrarAluno = new javax.swing.JLabel();
      campoCidadeCadastrarAluno = new javax.swing.JTextField();
      campoEstadoCadastrarAluno = new javax.swing.JTextField();
      labelEstadoCadastrarAluno = new javax.swing.JLabel();
      editStudentPanel = new javax.swing.JPanel();
      labelNome = new javax.swing.JLabel();
      labelNomeDoPai = new javax.swing.JLabel();
      labelNomeDaMae = new javax.swing.JLabel();
      labelEndereco = new javax.swing.JLabel();
      labelTelefone = new javax.swing.JLabel();
      labelCelular = new javax.swing.JLabel();
      labelDataDeNascimento = new javax.swing.JLabel();
      labelE_mail = new javax.swing.JLabel();
      campoNomeDaMae = new javax.swing.JTextField();
      campoNomeDoPai = new javax.swing.JTextField();
      campoTelefone = new javax.swing.JTextField();
      campoEndereco = new javax.swing.JTextField();
      campoCelular = new javax.swing.JTextField();
      campoEmail = new javax.swing.JTextField();
      campoDataDeNascimento = new javax.swing.JTextField();
      comboNome = new javax.swing.JComboBox();
      saveStudent = new javax.swing.JButton();
      labelGenero = new javax.swing.JLabel();
      comboGenero = new javax.swing.JComboBox();
      labelCidade = new javax.swing.JLabel();
      labelEstado = new javax.swing.JLabel();
      campoCidade = new javax.swing.JTextField();
      campoEstado = new javax.swing.JTextField();
      deleteStudentPanel = new javax.swing.JPanel();
      labelNomeExcluirCadastroAluno = new javax.swing.JLabel();
      comboNomeExcluirCadastroAluno = new javax.swing.JComboBox();
      jButton1 = new javax.swing.JButton();

      labelNomeCompleto.setText("Nome Completo");

      labelDataDeNascimentoCadastrarAluno.setText("Data de Nascimento");

      labelNomeDoPaiCadastrarAluno.setText("Nome Completo do Pai");

      labelNomeDaMaeCadastrarAluno.setText("Nome Completo da Mãe");

      labelEnderecoCadastrarAluno.setText("Endereço");

      labelTelefoneCadastrarAluno.setText("Telefone");

      labelCelularCadastrarAluno.setText("Celular");

      labelEmailCadastrarAluno.setText("E-mail");

      campoNomeCompleto.setToolTipText("teste");

      botaoCadastrar.setText("Cadastrar");
      botaoCadastrar.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoCadastrarActionPerformed(evt);
         }
      });

      campoDataDeNascimentoCadastrarAluno.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyTyped(java.awt.event.KeyEvent evt)
         {
            campoDataDeNascimentoCadastrarAlunoKeyTyped(evt);
         }
      });

      labelGeneroCadastrarAluno.setText("Gênero");

      comboGeneroCadastrarAluno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino", "Outro" }));

      labelCidadeCadastrarAluno.setText("Cidade");

      labelEstadoCadastrarAluno.setText("Estado");

      javax.swing.GroupLayout newStudentPanelLayout = new javax.swing.GroupLayout(newStudentPanel);
      newStudentPanel.setLayout(newStudentPanelLayout);
      newStudentPanelLayout.setHorizontalGroup(
         newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(newStudentPanelLayout.createSequentialGroup()
                  .addGap(0, 527, Short.MAX_VALUE)
                  .addComponent(botaoCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(newStudentPanelLayout.createSequentialGroup()
                  .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(labelNomeCompleto)
                     .addComponent(labelEmailCadastrarAluno)
                     .addComponent(labelCelularCadastrarAluno)
                     .addComponent(labelTelefoneCadastrarAluno)
                     .addComponent(labelEnderecoCadastrarAluno)
                     .addComponent(labelNomeDaMaeCadastrarAluno)
                     .addComponent(labelGeneroCadastrarAluno)
                     .addComponent(labelCidadeCadastrarAluno)
                     .addComponent(labelEstadoCadastrarAluno)
                     .addComponent(labelDataDeNascimentoCadastrarAluno)
                     .addComponent(labelNomeDoPaiCadastrarAluno))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(campoCelularCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                     .addComponent(campoTelefoneCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoNomeDoPaiCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoNomeDaMaeCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoEstadoCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoCidadeCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoEnderecoCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoDataDeNascimentoCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(campoEmailCadastrarAluno)
                     .addComponent(comboGeneroCadastrarAluno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(campoNomeCompleto, javax.swing.GroupLayout.Alignment.LEADING))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      newStudentPanelLayout.setVerticalGroup(
         newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newStudentPanelLayout.createSequentialGroup()
            .addGap(28, 28, 28)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNomeCompleto)
               .addComponent(campoNomeCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelDataDeNascimentoCadastrarAluno)
               .addComponent(campoDataDeNascimentoCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelGeneroCadastrarAluno)
               .addComponent(comboGeneroCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEnderecoCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEnderecoCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoCidadeCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCidadeCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEstadoCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEstadoCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoNomeDaMaeCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelNomeDaMaeCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoNomeDoPaiCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelNomeDoPaiCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoTelefoneCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelTelefoneCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoCelularCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCelularCadastrarAluno))
            .addGap(7, 7, 7)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEmailCadastrarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEmailCadastrarAluno))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
            .addComponent(botaoCadastrar)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Cadastrar Aluno", newStudentPanel);

      labelNome.setText("Nome");

      labelNomeDoPai.setText("Nome Completo do Pai");

      labelNomeDaMae.setText("Nome Completo da Mãe");

      labelEndereco.setText("Endereço");

      labelTelefone.setText("Telefone");

      labelCelular.setText("Celular");

      labelDataDeNascimento.setText("Data de Nascimento");

      labelE_mail.setText("E-mail");

      comboNome.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboNomePopupMenuWillBecomeVisible(evt);
         }
      });
      comboNome.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            comboNomeItemStateChanged(evt);
         }
      });

      saveStudent.setText("Salvar");

      labelGenero.setText("Gênero");

      comboGenero.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino", "Outro" }));

      labelCidade.setText("Cidade");

      labelEstado.setText("Estado");

      javax.swing.GroupLayout editStudentPanelLayout = new javax.swing.GroupLayout(editStudentPanel);
      editStudentPanel.setLayout(editStudentPanelLayout);
      editStudentPanelLayout.setHorizontalGroup(
         editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editStudentPanelLayout.createSequentialGroup()
                  .addGap(0, 527, Short.MAX_VALUE)
                  .addComponent(saveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(editStudentPanelLayout.createSequentialGroup()
                  .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(labelNomeDoPai)
                     .addComponent(labelNomeDaMae)
                     .addComponent(labelE_mail)
                     .addComponent(labelCelular)
                     .addComponent(labelTelefone)
                     .addComponent(labelNome)
                     .addComponent(labelGenero)
                     .addComponent(labelDataDeNascimento)
                     .addComponent(labelEndereco)
                     .addComponent(labelCidade)
                     .addComponent(labelEstado))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(comboGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(campoCelular)
                     .addComponent(campoTelefone)
                     .addComponent(campoNomeDoPai)
                     .addComponent(campoNomeDaMae)
                     .addComponent(campoEstado)
                     .addComponent(campoCidade)
                     .addComponent(campoEndereco)
                     .addComponent(campoDataDeNascimento)
                     .addComponent(comboNome, 0, 396, Short.MAX_VALUE)
                     .addComponent(campoEmail))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      editStudentPanelLayout.setVerticalGroup(
         editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editStudentPanelLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNome)
               .addComponent(comboNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelDataDeNascimento)
               .addComponent(campoDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelGenero)
               .addComponent(comboGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEndereco))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCidade))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEstado))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNomeDaMae)
               .addComponent(campoNomeDaMae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNomeDoPai, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(campoNomeDoPai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelTelefone))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCelular))
            .addGap(7, 7, 7)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(campoEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelE_mail))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
            .addComponent(saveStudent)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Editar Informações do Aluno", editStudentPanel);

      labelNomeExcluirCadastroAluno.setText("Nome");

      comboNomeExcluirCadastroAluno.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboNomeExcluirCadastroAlunoPopupMenuWillBecomeVisible(evt);
         }
      });

      jButton1.setText("Excluir");

      javax.swing.GroupLayout deleteStudentPanelLayout = new javax.swing.GroupLayout(deleteStudentPanel);
      deleteStudentPanel.setLayout(deleteStudentPanelLayout);
      deleteStudentPanelLayout.setHorizontalGroup(
         deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(deleteStudentPanelLayout.createSequentialGroup()
                  .addGap(0, 527, Short.MAX_VALUE)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(deleteStudentPanelLayout.createSequentialGroup()
                  .addComponent(labelNomeExcluirCadastroAluno)
                  .addGap(18, 18, 18)
                  .addComponent(comboNomeExcluirCadastroAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      deleteStudentPanelLayout.setVerticalGroup(
         deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteStudentPanelLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addGroup(deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNomeExcluirCadastroAluno)
               .addComponent(comboNomeExcluirCadastroAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 357, Short.MAX_VALUE)
            .addComponent(jButton1)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Excluir Cadastro do Aluno", deleteStudentPanel);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botaoCadastrarActionPerformed
   {//GEN-HEADEREND:event_botaoCadastrarActionPerformed
      ArrayList<String> months = new ArrayList<>();
      months.add("Janeiro");
      months.add("Fevereiro");
      months.add("Março");
      months.add("Abril");
      months.add("Maio");
      months.add("Junho");
      months.add("Julho");
      months.add("Agosto");
      months.add("Setembro");
      months.add("Outubro");
      months.add("Novembro");
      months.add("Dezembro");
      String nome = getCampoNome();
      String dataDeNascimento = getCampoDataDeNascimento();
      String genero = getComboGenero();
      String endereco = getCampoEndereco();
      String cidade = getCampoCidade();
      String estado = getCampoEstado();
      String nomeDaMae = getCampoNomeDaMae();
      String nomeDoPai = getCampoNomeDoPai();
      String telefone = getFieldTelephone();
      String celular = getFieldCellPhone();
      String email = getFieldEmail();
      SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
      ArrayList<dsproject.Aluno> students;
      ObjectInputStream in;
      ObjectOutputStream out;
      
      if(nome == null)
      {
         System.err.println("Nome faltando");
      }
      else
      {
         if(dataDeNascimento == null)
         {
            System.err.println("Data de nascimento faltando");
         }
         else
         {
            if(dataDeNascimento.length() != 10)
            {
               JOptionPane.showMessageDialog(null, "Digite uma " + labelDataDeNascimentoCadastrarAluno.getText() + " no formato dd/mm/aaaa", 
                                             "Erro", JOptionPane.ERROR_MESSAGE);
               labelDataDeNascimentoCadastrarAluno.setForeground(Color.red);
            }
            else
            {
               String splitedDateOfBirth[] = dataDeNascimento.split("/");
               if(Integer.parseInt(splitedDateOfBirth[0]) > 31)
               {
                  JOptionPane.showMessageDialog(null, "Não existe mês com mais de 31 dias", "Erro", JOptionPane.ERROR_MESSAGE);
                  labelDataDeNascimentoCadastrarAluno.setForeground(Color.red);
               }
               else
               {
                  if(Integer.parseInt(splitedDateOfBirth[1]) > 12)
                  {
                     JOptionPane.showMessageDialog(null, "Não existe mês maior que 12", "Erro", JOptionPane.ERROR_MESSAGE);
                     labelDataDeNascimentoCadastrarAluno.setForeground(Color.red);
                  }
                  else
                  {
                     if(Integer.parseInt(splitedDateOfBirth[0]) > 28)
                     {
                        int answer = JOptionPane.showConfirmDialog(null, months.get(Integer.parseInt(splitedDateOfBirth[1]) - 1)
                                                                     + " realmente tem " + splitedDateOfBirth[0] + " dias?", "Aviso", JOptionPane.YES_NO_OPTION);
                        if(answer == JOptionPane.CLOSED_OPTION || answer == JOptionPane.NO_OPTION)
                        {
                           System.err.println("Não foi confirmado se " + months.get(Integer.parseInt(splitedDateOfBirth[1]) - 1)
                                                + " tem " + splitedDateOfBirth[0] + " dias");
                           labelDataDeNascimentoCadastrarAluno.setForeground(Color.red);
                        }
                        else
                        {
                           if(genero == null)
                           {
                              System.err.println("Gênero faltando");
                           }
                           else
                           {
                              if(endereco == null)
                              {
                                 System.err.println("Endereço faltando");
                              }
                              else
                              {
                                 if(cidade == null)
                                 {
                                    System.err.println("Cidade faltando");
                                 }
                                 else
                                 {
                                    if(estado == null)
                                    {
                                       System.err.println("Estado faltando");
                                    }
                                    else
                                    {
                                       if(nomeDaMae == null)
                                       {
                                          System.err.println("Nome da Mãe faltando");
                                       }
                                       else
                                       {
                                          if(nomeDoPai == null)
                                          {
                                             System.err.println("Nome do Pai faltando");
                                          }
                                          else
                                          {
                                             try
                                             {
                                                java.util.Date birthday = sd.parse(dataDeNascimento);
                                                java.sql.Date sqlDateOfBirth = new java.sql.Date(birthday.getTime());
                                                dsproject.Aluno student = null;
                                                if(telefone == null && celular == null && email == null)
                                                {
                                                   student = new Aluno(nomeDaMae, nomeDoPai, nome, sqlDateOfBirth, genero, endereco, cidade, estado);
                                                }
                                                else
                                                {
                                                   if(telefone == null && !celular.isEmpty() && !email.isEmpty())
                                                   {
                                                      student = new Aluno(nomeDaMae, nomeDoPai, null, null, celular, email, nome, birthday, genero, endereco, cidade, estado);
                                                   }
                                                   else
                                                   {
                                                      if(telefone == null && celular == null && !email.isEmpty())
                                                      {
                                                         student = new Aluno(nomeDaMae, nomeDoPai, null, null, null, email, nome, birthday, genero, endereco, cidade, estado);
                                                      }
                                                      else
                                                      {
                                                         if(telefone == null && !celular.isEmpty() && email == null)
                                                         {
                                                            student = new Aluno(nomeDaMae, nomeDoPai, null, null, celular, null, nome, birthday, genero, endereco, cidade, estado);
                                                         }
                                                         else
                                                         {
                                                            if(!telefone.isEmpty() && celular == null && email == null)
                                                            {
                                                               student = new Aluno(nomeDaMae, nomeDoPai, null, telefone, null, null, nome, birthday, genero, endereco, cidade, estado);
                                                            }
                                                            else
                                                            {
                                                               student = new Aluno(nomeDaMae, nomeDoPai, null, telefone, celular, email, nome, birthday, genero, endereco, cidade, estado);
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                File arquivoAlunos = new File("alunos.txt");
                                                if(arquivoAlunos.exists())
                                                {
                                                   FileInputStream arquivo = new FileInputStream(arquivoAlunos);
                                                   in = new ObjectInputStream(arquivo);
                                                   students = (ArrayList<Aluno>)in.readObject();
                                                   students.add(student);
                                                   out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                   out.writeObject(students);
                                                   out.close();
                                                   JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                   labelCelularCadastrarAluno.setForeground(Color.black);
                                                   labelCidadeCadastrarAluno.setForeground(Color.black);
                                                   labelDataDeNascimentoCadastrarAluno.setForeground(Color.black);
                                                   labelEmailCadastrarAluno.setForeground(Color.black);
                                                   labelEnderecoCadastrarAluno.setForeground(Color.black);
                                                   labelEstadoCadastrarAluno.setForeground(Color.black);
                                                   labelGeneroCadastrarAluno.setForeground(Color.black);
                                                   labelNomeDaMaeCadastrarAluno.setForeground(Color.black);
                                                   labelNomeDoPaiCadastrarAluno.setForeground(Color.black);
                                                   labelTelefoneCadastrarAluno.setForeground(Color.black);
                                                   labelNomeCompleto.setForeground(Color.black);
                                                   Interface.ClassPanel.setStudentAddedComboAluno(true);
                                                   Interface.ClassPanel.setStudentAddedComboAdicionarAluno(true);
                                                   Interface.ClassPanel.setStudentAddedCombonomeDoAluno(true);
                                                   setStudentAddedComboName(true);
                                                   setStudentAddedComboStudent(true);
                                                   setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                   setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAdicionarAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAdicionarAluno() 
                                                                                                                    + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAluno()
                                                                                                                    + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboNomeDoAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboNomeDoAluno()
                                                                                                                    + 1);
                                                   limpaCamposCadastrarAluno();
                                                }
                                                else
                                                {
                                                   students = new ArrayList<>();
                                                   students.add(student);
                                                   out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                   out.writeObject(students);
                                                   out.close();
                                                   JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                   labelCelularCadastrarAluno.setForeground(Color.black);
                                                   labelCidadeCadastrarAluno.setForeground(Color.black);
                                                   labelDataDeNascimentoCadastrarAluno.setForeground(Color.black);
                                                   labelEmailCadastrarAluno.setForeground(Color.black);
                                                   labelEnderecoCadastrarAluno.setForeground(Color.black);
                                                   labelEstadoCadastrarAluno.setForeground(Color.black);
                                                   labelGeneroCadastrarAluno.setForeground(Color.black);
                                                   labelNomeDaMaeCadastrarAluno.setForeground(Color.black);
                                                   labelNomeDoPaiCadastrarAluno.setForeground(Color.black);
                                                   labelTelefoneCadastrarAluno.setForeground(Color.black);
                                                   labelNomeCompleto.setForeground(Color.black);
                                                   Interface.ClassPanel.setStudentAddedComboAluno(true);
                                                   Interface.ClassPanel.setStudentAddedComboAdicionarAluno(true);
                                                   Interface.ClassPanel.setStudentAddedCombonomeDoAluno(true);
                                                   setStudentAddedComboName(true);
                                                   setStudentAddedComboStudent(true);
                                                   setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                   setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAdicionarAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAdicionarAluno() 
                                                                                                                    + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAluno()
                                                                                                                    + 1);
                                                   Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboNomeDoAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboNomeDoAluno()
                                                                                                                    + 1);
                                                   limpaCamposCadastrarAluno();
                                                }

                                             }
                                             catch (ParseException | IOException | ClassNotFoundException ex)
                                             {
                                                System.err.println(ex);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else
                     {
                        if(genero == null)
                        {
                           System.err.println("Gênero faltando");
                        }
                        else
                        {
                           if(endereco == null)
                           {
                              System.err.println("Endereço faltando");
                           }
                           else
                           {
                              if(cidade == null)
                              {
                                 System.err.println("Cidade faltando");
                              }
                              else
                              {
                                 if(estado == null)
                                 {
                                    System.err.println("Estado faltando");
                                 }
                                 else
                                 {
                                    if(nomeDaMae == null)
                                    {
                                       System.err.println("Nome da Mãe faltando");
                                    }
                                    else
                                    {
                                       if(nomeDoPai == null)
                                       {
                                          System.err.println("Nome do Pai faltando");
                                       }
                                       else
                                       {
                                          try
                                          {
                                             java.util.Date birthday = sd.parse(dataDeNascimento);
                                             java.sql.Date sqlDateOfBirth = new java.sql.Date(birthday.getTime());
                                             dsproject.Aluno student = null;
                                             if(telefone == null && celular == null && email == null)
                                             {
                                                student = new Aluno(nomeDaMae, nomeDoPai, nome, sqlDateOfBirth, genero, endereco, cidade, estado);
                                             }
                                             else
                                             {
                                                if(telefone == null && !celular.isEmpty() && !email.isEmpty())
                                                {
                                                   student = new Aluno(nomeDaMae, nomeDoPai, null, null, celular, email, nome, birthday, genero, endereco, cidade, estado);
                                                }
                                                else
                                                {
                                                   if(telefone == null && celular == null && !email.isEmpty())
                                                   {
                                                      student = new Aluno(nomeDaMae, nomeDoPai, null, null, null, email, nome, birthday, genero, endereco, cidade, estado);
                                                   }
                                                   else
                                                   {
                                                      if(telefone == null && !celular.isEmpty() && email == null)
                                                      {
                                                         student = new Aluno(nomeDaMae, nomeDoPai, null, null, celular, null, nome, birthday, genero, endereco, cidade, estado);
                                                      }
                                                      else
                                                      {
                                                         if(!telefone.isEmpty() && celular == null && email == null)
                                                         {
                                                            student = new Aluno(nomeDaMae, nomeDoPai, null, telefone, null, null, nome, birthday, genero, endereco, cidade, estado);
                                                         }
                                                         else
                                                         {
                                                            student = new Aluno(nomeDaMae, nomeDoPai, null, telefone, celular, email, nome, birthday, genero, endereco, cidade, estado);
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             File arquivoAluno = new File("alunos.txt");
                                             if(arquivoAluno.exists())
                                             {
                                                FileInputStream arquivo = new FileInputStream(arquivoAluno);
                                                in = new ObjectInputStream(arquivo);
                                                students = (ArrayList<Aluno>)in.readObject();
                                                students.add(student);
                                                out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                out.writeObject(students);
                                                out.close();
                                                JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                labelCelularCadastrarAluno.setForeground(Color.black);
                                                labelCidadeCadastrarAluno.setForeground(Color.black);
                                                labelDataDeNascimentoCadastrarAluno.setForeground(Color.black);
                                                labelEmailCadastrarAluno.setForeground(Color.black);
                                                labelEnderecoCadastrarAluno.setForeground(Color.black);
                                                labelEstadoCadastrarAluno.setForeground(Color.black);
                                                labelGeneroCadastrarAluno.setForeground(Color.black);
                                                labelNomeDaMaeCadastrarAluno.setForeground(Color.black);
                                                labelNomeDoPaiCadastrarAluno.setForeground(Color.black);
                                                labelTelefoneCadastrarAluno.setForeground(Color.black);
                                                labelNomeCompleto.setForeground(Color.black);
                                                Interface.ClassPanel.setStudentAddedComboAluno(true);
                                                Interface.ClassPanel.setStudentAddedComboAdicionarAluno(true);
                                                Interface.ClassPanel.setStudentAddedCombonomeDoAluno(true);
                                                setStudentAddedComboName(true);
                                                setStudentAddedComboStudent(true);
                                                setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAdicionarAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAdicionarAluno() 
                                                                                                                 + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAluno()
                                                                                                                 + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboNomeDoAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboNomeDoAluno()
                                                                                                                 + 1);
                                                limpaCamposCadastrarAluno();
                                             }
                                             else
                                             {
                                                students = new ArrayList<>();
                                                students.add(student);
                                                out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                out.writeObject(students);
                                                out.close();
                                                JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                labelCelularCadastrarAluno.setForeground(Color.black);
                                                labelCidadeCadastrarAluno.setForeground(Color.black);
                                                labelDataDeNascimentoCadastrarAluno.setForeground(Color.black);
                                                labelEmailCadastrarAluno.setForeground(Color.black);
                                                labelEnderecoCadastrarAluno.setForeground(Color.black);
                                                labelEstadoCadastrarAluno.setForeground(Color.black);
                                                labelGeneroCadastrarAluno.setForeground(Color.black);
                                                labelNomeDaMaeCadastrarAluno.setForeground(Color.black);
                                                labelNomeDoPaiCadastrarAluno.setForeground(Color.black);
                                                labelTelefoneCadastrarAluno.setForeground(Color.black);
                                                labelNomeCompleto.setForeground(Color.black);
                                                Interface.ClassPanel.setStudentAddedComboAluno(true);
                                                Interface.ClassPanel.setStudentAddedComboAdicionarAluno(true);
                                                Interface.ClassPanel.setStudentAddedCombonomeDoAluno(true);
                                                setStudentAddedComboName(true);
                                                setStudentAddedComboStudent(true);
                                                setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAdicionarAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAdicionarAluno() 
                                                                                                                 + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAluno()
                                                                                                                 + 1);
                                                Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboNomeDoAluno(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboNomeDoAluno()
                                                                                                                 + 1);
                                                limpaCamposCadastrarAluno();
                                             }

                                          }
                                          catch (ParseException | IOException | ClassNotFoundException ex)
                                          {
                                             System.err.println(ex);
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_botaoCadastrarActionPerformed

   private void campoDataDeNascimentoCadastrarAlunoKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_campoDataDeNascimentoCadastrarAlunoKeyTyped
   {//GEN-HEADEREND:event_campoDataDeNascimentoCadastrarAlunoKeyTyped
      if(!Character.isDigit(evt.getKeyChar()))
      {
         evt.setKeyChar('\0');
      }
      else
      {
         String textoCampo = campoDataDeNascimentoCadastrarAluno.getText();
         if(textoCampo.length() == 2)
            campoDataDeNascimentoCadastrarAluno.setText(textoCampo + "/");
         else
         {
            if(textoCampo.length() == 5)
               campoDataDeNascimentoCadastrarAluno.setText(textoCampo + "/");
            else
            {
               if(textoCampo.length() > 9)
                  evt.setKeyChar('\0');
            }
         }
      }
   }//GEN-LAST:event_campoDataDeNascimentoCadastrarAlunoKeyTyped

   private void comboNomePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboNomePopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboNomePopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboNome.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> students;
      ObjectInputStream in;
      if(isStudentAddedComboStudent() && isNull == null)
      {
         //daqui até o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboNome.addItem("");
               while(i < students.size())
               {
                  comboNome.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboStudent(false);
         setNumeroDeAlunosAdicionadosComboStudent(0);
      }
      else
      {
         if(isStudentAddedComboStudent() && isNull != null)
         {
            //daqui até o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboStudent());
                  while(i < students.size())
                  {
                     comboNome.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboStudent(false);
            setNumeroDeAlunosAdicionadosComboStudent(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<Aluno>)in.readObject();
                     comboNome.addItem("");
                     while(i < students.size())
                     {
                        comboNome.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboNomePopupMenuWillBecomeVisible

   private void comboNomeExcluirCadastroAlunoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboNomeExcluirCadastroAlunoPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboNomeExcluirCadastroAlunoPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboNomeExcluirCadastroAluno.getItemAt(0);
      int i = 0;
      ArrayList<Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboName()&& isNull == null)
      {
         //daqui até o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<Aluno>)in.readObject();
               i = 0;
               comboNomeExcluirCadastroAluno.addItem("");
               while(i < students.size())
               {
                  comboNomeExcluirCadastroAluno.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboName(false);
         setNumeroDeAlunosAdicionadosComboName(0);
      }
      else
      {
         if(isStudentAddedComboName() && isNull != null)
         {
            //daqui até o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboName());
                  while(i < students.size())
                  {
                     comboNomeExcluirCadastroAluno.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboName(false);
            setNumeroDeAlunosAdicionadosComboName(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<Aluno>)in.readObject();
                     comboNomeExcluirCadastroAluno.addItem("");
                     while(i < students.size())
                     {
                        comboNomeExcluirCadastroAluno.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboNomeExcluirCadastroAlunoPopupMenuWillBecomeVisible

   private void comboNomeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_comboNomeItemStateChanged
   {//GEN-HEADEREND:event_comboNomeItemStateChanged
      if (evt.getStateChange() == 1)
      {
         if(evt.getItem().equals(""))
         {
            System.out.println("espaço em branco"); 
            limpaCamposEditarInformacoesAluno();
         }
         else
         {
            int i = 0;
            ArrayList<Aluno> students = null;
            ObjectInputStream in;
            SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<Aluno>)in.readObject();
                  for(i = 0; i < students.size(); i++)
                  {
                     if(students.get(i).getNome().equals(evt.getItem().toString()))
                     {
                        campoDataDeNascimento.setText(sd.format(students.get(i).getDataDeNascimento()).toString());
                        comboGenero.setSelectedItem(students.get(i).getGenero());
                        campoEndereco.setText(students.get(i).getEndereco());
                        campoCidade.setText(students.get(i).getCidade());
                        campoEstado.setText(students.get(i).getEstado());
                        campoNomeDaMae.setText(students.get(i).getNomeDaMae());
                        campoNomeDoPai.setText(students.get(i).getNomeDoPai());
                        campoTelefone.setText(students.get(i).getTelefone());
                        campoCelular.setText(students.get(i).getCelular());
                        campoEmail.setText(students.get(i).getEmail());
                     }
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }
            }
         }
      }
   }//GEN-LAST:event_comboNomeItemStateChanged


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton botaoCadastrar;
   private javax.swing.JTextField campoCelular;
   private static javax.swing.JTextField campoCelularCadastrarAluno;
   private javax.swing.JTextField campoCidade;
   private static javax.swing.JTextField campoCidadeCadastrarAluno;
   private javax.swing.JTextField campoDataDeNascimento;
   private static javax.swing.JTextField campoDataDeNascimentoCadastrarAluno;
   private javax.swing.JTextField campoEmail;
   private static javax.swing.JTextField campoEmailCadastrarAluno;
   private javax.swing.JTextField campoEndereco;
   private static javax.swing.JTextField campoEnderecoCadastrarAluno;
   private javax.swing.JTextField campoEstado;
   private static javax.swing.JTextField campoEstadoCadastrarAluno;
   private static javax.swing.JTextField campoNomeCompleto;
   private javax.swing.JTextField campoNomeDaMae;
   private static javax.swing.JTextField campoNomeDaMaeCadastrarAluno;
   private javax.swing.JTextField campoNomeDoPai;
   private static javax.swing.JTextField campoNomeDoPaiCadastrarAluno;
   private javax.swing.JTextField campoTelefone;
   private static javax.swing.JTextField campoTelefoneCadastrarAluno;
   private javax.swing.JComboBox comboGenero;
   private static javax.swing.JComboBox comboGeneroCadastrarAluno;
   private javax.swing.JComboBox comboNome;
   private static javax.swing.JComboBox comboNomeExcluirCadastroAluno;
   private javax.swing.JPanel deleteStudentPanel;
   private javax.swing.JPanel editStudentPanel;
   private javax.swing.JButton jButton1;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JLabel labelCelular;
   private static javax.swing.JLabel labelCelularCadastrarAluno;
   private javax.swing.JLabel labelCidade;
   private static javax.swing.JLabel labelCidadeCadastrarAluno;
   private javax.swing.JLabel labelDataDeNascimento;
   private static javax.swing.JLabel labelDataDeNascimentoCadastrarAluno;
   private javax.swing.JLabel labelE_mail;
   private static javax.swing.JLabel labelEmailCadastrarAluno;
   private javax.swing.JLabel labelEndereco;
   private static javax.swing.JLabel labelEnderecoCadastrarAluno;
   private javax.swing.JLabel labelEstado;
   private static javax.swing.JLabel labelEstadoCadastrarAluno;
   private javax.swing.JLabel labelGenero;
   private static javax.swing.JLabel labelGeneroCadastrarAluno;
   private javax.swing.JLabel labelNome;
   private static javax.swing.JLabel labelNomeCompleto;
   private javax.swing.JLabel labelNomeDaMae;
   private static javax.swing.JLabel labelNomeDaMaeCadastrarAluno;
   private javax.swing.JLabel labelNomeDoPai;
   private static javax.swing.JLabel labelNomeDoPaiCadastrarAluno;
   private javax.swing.JLabel labelNomeExcluirCadastroAluno;
   private javax.swing.JLabel labelTelefone;
   private static javax.swing.JLabel labelTelefoneCadastrarAluno;
   private javax.swing.JPanel newStudentPanel;
   private javax.swing.JButton saveStudent;
   // End of variables declaration//GEN-END:variables
   private static boolean studentAddedComboStudent;
   private static boolean studentAddedComboName;
   private int numeroDeAlunosAdicionadosComboStudent = 0;
   private int numeroDeAlunosAdicionadosComboName = 0;

   public int getNumeroDeAlunosAdicionadosComboStudent()
   {
      return numeroDeAlunosAdicionadosComboStudent;
   }

   public void setNumeroDeAlunosAdicionadosComboStudent(int numeroDeAlunosAdicionadosComboStudent)
   {
      this.numeroDeAlunosAdicionadosComboStudent = numeroDeAlunosAdicionadosComboStudent;
   }

   public int getNumeroDeAlunosAdicionadosComboName()
   {
      return numeroDeAlunosAdicionadosComboName;
   }

   public void setNumeroDeAlunosAdicionadosComboName(int numeroDeAlunosAdicionadosComboName)
   {
      this.numeroDeAlunosAdicionadosComboName = numeroDeAlunosAdicionadosComboName;
   }
   
   public static boolean isStudentAddedComboStudent()
   {
      return studentAddedComboStudent;
   }
   
   public static void setStudentAddedComboStudent(boolean studentAdded)
   {
      StudentPanel.studentAddedComboStudent = studentAdded;
   }

   public static boolean isStudentAddedComboName()
   {
      return studentAddedComboName;
   }

   public static void setStudentAddedComboName(boolean studentAddedComboName)
   {
      StudentPanel.studentAddedComboName = studentAddedComboName;
   }
   
   public static String getCampoNome()
   {
      if(campoNomeCompleto.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelNomeCompleto.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelNomeCompleto.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoNomeCompleto.getText();
      }
   }

   public static String getCampoDataDeNascimento()
   {
      if(campoDataDeNascimentoCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite uma " + labelDataDeNascimentoCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelDataDeNascimentoCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoDataDeNascimentoCadastrarAluno.getText();
      }
   }

   public static String getComboGenero()
   {
      if(comboGeneroCadastrarAluno.getSelectedIndex() == -1)
      {
         JOptionPane.showMessageDialog(null, "Escolha um " + labelGeneroCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelGeneroCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return comboGeneroCadastrarAluno.getSelectedItem().toString();
      }
   }
   
   public static String getCampoEndereco()
   {
      if(campoEnderecoCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelEnderecoCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelEnderecoCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoEnderecoCadastrarAluno.getText();
      }
   }
   
   public static String getCampoCidade()
   {
      if(campoCidadeCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite uma " + labelCidadeCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelCidadeCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoCidadeCadastrarAluno.getText();
      }
   }
   
   public static String getCampoEstado()
   {
      if(campoEstadoCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelEstadoCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelEstadoCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoEstadoCadastrarAluno.getText();
      }
   }
   
   public static String getCampoNomeDaMae()
   {
      if(campoNomeDaMaeCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelNomeDaMaeCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelNomeDaMaeCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoNomeDaMaeCadastrarAluno.getText();
      }
   }
   
   public static String getCampoNomeDoPai()
   {
      if(campoNomeDoPaiCadastrarAluno.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelNomeDoPaiCadastrarAluno.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         labelNomeDoPaiCadastrarAluno.setForeground(Color.red);
         return null;
      }
      else
      {
         return campoNomeDoPaiCadastrarAluno.getText();
      }
   }
   
   public static String getFieldTelephone()
   {
      if(campoTelefoneCadastrarAluno.getText().isEmpty())
         return null;
      else
         return campoTelefoneCadastrarAluno.getText();  
   }

   public static String getFieldCellPhone()
   {
      if(campoCelularCadastrarAluno.getText().isEmpty())
         return null;
      else
         return campoCelularCadastrarAluno.getText();
   }

   public static String getFieldEmail()
   {
      if(campoEmailCadastrarAluno.getText().isEmpty())
         return null;
      else
         return campoEmailCadastrarAluno.getText();
   }
   
   public void limpaCamposCadastrarAluno()
   {
      campoNomeCompleto.setText("");
      campoEnderecoCadastrarAluno.setText("");
      campoCelularCadastrarAluno.setText("");
      campoCidadeCadastrarAluno.setText("");
      campoDataDeNascimentoCadastrarAluno.setText("");
      campoEmailCadastrarAluno.setText("");
      campoNomeDoPaiCadastrarAluno.setText("");
      campoNomeDaMaeCadastrarAluno.setText("");
      campoEstadoCadastrarAluno.setText("");
      campoTelefoneCadastrarAluno.setText("");
   }
   
   public void limpaCamposEditarInformacoesAluno()
   {
      campoCelular.setText("");
      campoCidade.setText("");
      campoDataDeNascimento.setText("");
      campoEmail.setText("");
      campoEndereco.setText("");
      campoEstado.setText("");
      campoNomeDaMae.setText("");
      campoNomeDoPai.setText("");
      campoTelefone.setText("");
   }
}
