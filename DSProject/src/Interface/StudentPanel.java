/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentPanel.java
 *
 * Created on 14/06/2013, 13:59:28
 */
package Interface;

import static Interface.ClassPanel.isStudentAddedComboStudent;
import static Interface.ClassPanel.setStudentAddedComboStudent;
import dsproject.Aluno;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Günther
 */
public class StudentPanel extends javax.swing.JPanel {

    /** Creates new form StudentPanel */
    public StudentPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jTabbedPane1 = new javax.swing.JTabbedPane();
      newStudentPanel = new javax.swing.JPanel();
      labelName = new javax.swing.JLabel();
      labelDateOfBirth = new javax.swing.JLabel();
      labelNameOfFather = new javax.swing.JLabel();
      labelNameOfMother = new javax.swing.JLabel();
      labelAddress = new javax.swing.JLabel();
      labelTelephone = new javax.swing.JLabel();
      labelCellPhone = new javax.swing.JLabel();
      labelEmail = new javax.swing.JLabel();
      fieldName = new javax.swing.JTextField();
      fieldNameOfMother = new javax.swing.JTextField();
      fieldNameOfFather = new javax.swing.JTextField();
      fieldTelephone = new javax.swing.JTextField();
      fieldAddress = new javax.swing.JTextField();
      fieldCellPhone = new javax.swing.JTextField();
      fieldEmail = new javax.swing.JTextField();
      buttonRegister = new javax.swing.JButton();
      fieldDateOfBirth = new javax.swing.JTextField();
      labelGender = new javax.swing.JLabel();
      comboGender = new javax.swing.JComboBox();
      labelCity = new javax.swing.JLabel();
      fieldCity = new javax.swing.JTextField();
      fieldState = new javax.swing.JTextField();
      labelState = new javax.swing.JLabel();
      editStudentPanel = new javax.swing.JPanel();
      nameStudent2 = new javax.swing.JLabel();
      fatherStudent2 = new javax.swing.JLabel();
      motherStudent2 = new javax.swing.JLabel();
      adressStudent2 = new javax.swing.JLabel();
      phoneStudent2 = new javax.swing.JLabel();
      cellphoneStudent2 = new javax.swing.JLabel();
      birthdayStudent2 = new javax.swing.JLabel();
      emailStudent2 = new javax.swing.JLabel();
      motherTextField2 = new javax.swing.JTextField();
      fatherTextField2 = new javax.swing.JTextField();
      phoneTextField2 = new javax.swing.JTextField();
      adressTextField2 = new javax.swing.JTextField();
      cellphoneTextField2 = new javax.swing.JTextField();
      emailTextField2 = new javax.swing.JTextField();
      birthdaylTextField2 = new javax.swing.JTextField();
      comboStudent = new javax.swing.JComboBox();
      saveStudent = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      studentComboBox1 = new javax.swing.JComboBox();
      deleteStudentPanel = new javax.swing.JPanel();
      nameStudentDelete = new javax.swing.JLabel();
      comboName = new javax.swing.JComboBox();
      jButton1 = new javax.swing.JButton();

      labelName.setText("Nome Completo");

      labelDateOfBirth.setText("Data de Nascimento");

      labelNameOfFather.setText("Nome Completo do Pai");

      labelNameOfMother.setText("Nome Completo da Mãe");

      labelAddress.setText("Endereço");

      labelTelephone.setText("Telefone");

      labelCellPhone.setText("Celular");

      labelEmail.setText("E-mail");

      fieldName.setToolTipText("teste");

      buttonRegister.setText("Cadastrar");
      buttonRegister.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            buttonRegisterActionPerformed(evt);
         }
      });

      fieldDateOfBirth.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyTyped(java.awt.event.KeyEvent evt)
         {
            fieldDateOfBirthKeyTyped(evt);
         }
      });

      labelGender.setText("Gênero");

      comboGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino", "Outro" }));

      labelCity.setText("Cidade");

      labelState.setText("Estado");

      javax.swing.GroupLayout newStudentPanelLayout = new javax.swing.GroupLayout(newStudentPanel);
      newStudentPanel.setLayout(newStudentPanelLayout);
      newStudentPanelLayout.setHorizontalGroup(
         newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(newStudentPanelLayout.createSequentialGroup()
                  .addGap(0, 527, Short.MAX_VALUE)
                  .addComponent(buttonRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(newStudentPanelLayout.createSequentialGroup()
                  .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(labelName)
                     .addComponent(labelEmail)
                     .addComponent(labelCellPhone)
                     .addComponent(labelTelephone)
                     .addComponent(labelAddress)
                     .addComponent(labelNameOfMother)
                     .addComponent(labelGender)
                     .addComponent(labelCity)
                     .addComponent(labelState)
                     .addComponent(labelDateOfBirth)
                     .addComponent(labelNameOfFather))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(fieldCellPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                     .addComponent(fieldTelephone, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldNameOfFather, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldNameOfMother, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldState, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldCity, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldAddress, javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(comboGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldDateOfBirth))
                     .addComponent(fieldName, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(fieldEmail))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      newStudentPanelLayout.setVerticalGroup(
         newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newStudentPanelLayout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelName)
               .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelDateOfBirth)
               .addComponent(fieldDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelGender)
               .addComponent(comboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelAddress))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCity))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelState))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldNameOfMother, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelNameOfMother))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldNameOfFather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelNameOfFather, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelTelephone))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldCellPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelCellPhone))
            .addGap(7, 7, 7)
            .addGroup(newStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelEmail))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
            .addComponent(buttonRegister)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Cadastrar Aluno", newStudentPanel);

      nameStudent2.setText("Nome");

      fatherStudent2.setText("Nome Completo do Pai");

      motherStudent2.setText("Nome Completo da Mãe");

      adressStudent2.setText("Endereço");

      phoneStudent2.setText("Telefone");

      cellphoneStudent2.setText("Celular");

      birthdayStudent2.setText("Data de Nascimento");

      emailStudent2.setText("E-mail");

      comboStudent.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboStudentPopupMenuWillBecomeVisible(evt);
         }
      });

      saveStudent.setText("Salvar");

      jLabel2.setText("Sexo");

      studentComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino" }));

      javax.swing.GroupLayout editStudentPanelLayout = new javax.swing.GroupLayout(editStudentPanel);
      editStudentPanel.setLayout(editStudentPanelLayout);
      editStudentPanelLayout.setHorizontalGroup(
         editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editStudentPanelLayout.createSequentialGroup()
            .addContainerGap(542, Short.MAX_VALUE)
            .addComponent(saveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
         .addGroup(editStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(birthdayStudent2)
               .addComponent(fatherStudent2)
               .addComponent(motherStudent2)
               .addComponent(emailStudent2)
               .addComponent(cellphoneStudent2)
               .addComponent(phoneStudent2)
               .addComponent(adressStudent2)
               .addComponent(nameStudent2)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(cellphoneTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                  .addComponent(phoneTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                  .addComponent(adressTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                  .addComponent(emailTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                  .addComponent(comboStudent, javax.swing.GroupLayout.Alignment.TRAILING, 0, 417, Short.MAX_VALUE)
                  .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(birthdaylTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(studentComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addComponent(motherTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fatherTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      editStudentPanelLayout.setVerticalGroup(
         editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editStudentPanelLayout.createSequentialGroup()
            .addGap(28, 28, 28)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(nameStudent2)
               .addComponent(comboStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(6, 6, 6)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(studentComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(birthdayStudent2)
               .addComponent(birthdaylTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(fatherStudent2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fatherTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(motherStudent2)
               .addComponent(motherTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(adressTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(adressStudent2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(phoneTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(phoneStudent2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cellphoneTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(cellphoneStudent2))
            .addGap(7, 7, 7)
            .addGroup(editStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(emailTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(emailStudent2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
            .addComponent(saveStudent)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Editar Informações do Aluno", editStudentPanel);

      nameStudentDelete.setText("Nome");

      comboName.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboNamePopupMenuWillBecomeVisible(evt);
         }
      });

      jButton1.setText("Excluir");

      javax.swing.GroupLayout deleteStudentPanelLayout = new javax.swing.GroupLayout(deleteStudentPanel);
      deleteStudentPanel.setLayout(deleteStudentPanelLayout);
      deleteStudentPanelLayout.setHorizontalGroup(
         deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(deleteStudentPanelLayout.createSequentialGroup()
                  .addGap(0, 529, Short.MAX_VALUE)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(deleteStudentPanelLayout.createSequentialGroup()
                  .addComponent(nameStudentDelete)
                  .addGap(18, 18, 18)
                  .addComponent(comboName, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      deleteStudentPanelLayout.setVerticalGroup(
         deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteStudentPanelLayout.createSequentialGroup()
            .addGap(28, 28, 28)
            .addGroup(deleteStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(nameStudentDelete)
               .addComponent(comboName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 359, Short.MAX_VALUE)
            .addComponent(jButton1)
            .addContainerGap())
      );

      jTabbedPane1.addTab("Excluir Cadastro do Aluno", deleteStudentPanel);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void buttonRegisterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRegisterActionPerformed
   {//GEN-HEADEREND:event_buttonRegisterActionPerformed
      ArrayList<String> months = new ArrayList<>();
      months.add("Janeiro");
      months.add("Fevereiro");
      months.add("Março");
      months.add("Abril");
      months.add("Maio");
      months.add("Junho");
      months.add("Julho");
      months.add("Agosto");
      months.add("Setembro");
      months.add("Outubro");
      months.add("Novembro");
      months.add("Dezembro");
      String name = getFieldName();
      String dateOfBirth = getFieldDateOfBirth();
      String gender = getComboGender();
      String address = getFieldAddress();
      String city = getFieldCity();
      String state = getFieldState();
      String nameOfMother = getFieldNameOfMother();
      String nameOfFather = getFieldNameOfFather();
      String telephone = getFieldTelephone();
      String cellphone = getFieldCellPhone();
      String email = getFieldEmail();
      SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
      ArrayList<dsproject.Aluno> students = new ArrayList<>();
      ObjectInputStream in;
      ObjectOutputStream out;
      
      if(name == null)
      {
         System.err.println("Nome faltando");
      }
      else
      {
         if(dateOfBirth == null)
         {
            System.err.println("Data de nascimento faltando");
         }
         else
         {
            if(dateOfBirth.length() != 10)
            {
               JOptionPane.showMessageDialog(null, "Digite uma " + labelDateOfBirth.getText() + " no formato dd/mm/aaaa", 
                                             "Erro", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
               String splitedDateOfBirth[] = dateOfBirth.split("/");
               if(Integer.parseInt(splitedDateOfBirth[0]) > 31)
               {
                  JOptionPane.showMessageDialog(null, "Não existe mês com mais de 31 dias", "Erro", JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                  if(Integer.parseInt(splitedDateOfBirth[1]) > 12)
                  {
                     JOptionPane.showMessageDialog(null, "Não existe mês maior que 12", "Erro", JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                     if(Integer.parseInt(splitedDateOfBirth[0]) > 28)
                     {
                        int answer = JOptionPane.showConfirmDialog(null, months.get(Integer.parseInt(splitedDateOfBirth[1]) - 1)
                                                                     + " realmente tem " + splitedDateOfBirth[0] + " dias?", "Aviso", JOptionPane.YES_NO_OPTION);
                        if(answer == JOptionPane.CLOSED_OPTION || answer == JOptionPane.NO_OPTION)
                        {
                           System.err.println("Não foi confirmado se " + months.get(Integer.parseInt(splitedDateOfBirth[1]) - 1)
                                                + " tem " + splitedDateOfBirth[0] + " dias");
                        }
                        else
                        {
                           if(gender == null)
                           {
                              System.err.println("Gênero faltando");
                           }
                           else
                           {
                              if(address == null)
                              {
                                 System.err.println("Endereço faltando");
                              }
                              else
                              {
                                 if(city == null)
                                 {
                                    System.err.println("Cidade faltando");
                                 }
                                 else
                                 {
                                    if(state == null)
                                    {
                                       System.err.println("Estado faltando");
                                    }
                                    else
                                    {
                                       if(nameOfMother == null)
                                       {
                                          System.err.println("Nome da Mãe faltando");
                                       }
                                       else
                                       {
                                          if(nameOfFather == null)
                                          {
                                             System.err.println("Nome do Pai faltando");
                                          }
                                          else
                                          {
                                             if(telephone == null)
                                             {
                                                System.err.println("Telephone faltando");
                                             }
                                             else
                                             {
                                                if(cellphone == null)
                                                {
                                                   System.err.println("Celular faltando");
                                                }
                                                else
                                                {
                                                   if(email == null)
                                                   {
                                                      System.err.println("Email faltando");
                                                   }
                                                   else
                                                   {
                                                      try
                                                      {
                                                         java.util.Date birthday = sd.parse(dateOfBirth);
                                                         java.sql.Date sqlDateOfBirth = new java.sql.Date(birthday.getTime());
                                                         dsproject.Aluno student = new Aluno(nameOfMother, nameOfFather, name, sqlDateOfBirth, gender, address, city, state);
                                                         File fileStudents = new File("alunos.txt");
                                                         if(fileStudents.exists())
                                                         {
                                                            FileInputStream file = new FileInputStream(fileStudents);
                                                            in = new ObjectInputStream(file);
                                                            students = (ArrayList<Aluno>)in.readObject();
                                                            students.add(student);
                                                            out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                            out.writeObject(students);
                                                            out.close();
                                                            JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                            Interface.ClassPanel.setStudentAddedComboStudent(true);
                                                            Interface.ClassPanel.setStudentAddedComboAddStudent(true);
                                                            Interface.ClassPanel.setStudentAddedComboStudentName(true);
                                                            setStudentAddedComboName(true);
                                                            setStudentAddedComboStudent(true);
                                                            setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                            setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAddStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAddStudent() 
                                                                                                                             + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudent()
                                                                                                                             + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudentName(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudentName()
                                                                                                                             + 1);
                                                            clearFields();
                                                         }
                                                         else
                                                         {
                                                            students.add(student);
                                                            out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                            out.writeObject(students);
                                                            out.close();
                                                            JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                            Interface.ClassPanel.setStudentAddedComboStudent(true);
                                                            Interface.ClassPanel.setStudentAddedComboAddStudent(true);
                                                            Interface.ClassPanel.setStudentAddedComboStudentName(true);
                                                            setStudentAddedComboName(true);
                                                            setStudentAddedComboStudent(true);
                                                            setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                            setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAddStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAddStudent() 
                                                                                                                             + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudent()
                                                                                                                             + 1);
                                                            Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudentName(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudentName()
                                                                                                                             + 1);
                                                            clearFields();
                                                         }
                                                         
                                                      }
                                                      catch (ParseException | IOException | ClassNotFoundException ex)
                                                      {
                                                         System.err.println(ex);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else
                     {
                        if(gender == null)
                        {
                           System.err.println("Gênero faltando");
                        }
                        else
                        {
                           if(address == null)
                           {
                              System.err.println("Endereço faltando");
                           }
                           else
                           {
                              if(city == null)
                              {
                                 System.err.println("Cidade faltando");
                              }
                              else
                              {
                                 if(state == null)
                                 {
                                    System.err.println("Estado faltando");
                                 }
                                 else
                                 {
                                    if(nameOfMother == null)
                                    {
                                       System.err.println("Nome da Mãe faltando");
                                    }
                                    else
                                    {
                                       if(nameOfFather == null)
                                       {
                                          System.err.println("Nome do Pai faltando");
                                       }
                                       else
                                       {
                                          if(telephone == null)
                                          {
                                             System.err.println("Telephone faltando");
                                          }
                                          else
                                          {
                                             if(cellphone == null)
                                             {
                                                System.err.println("Celular faltando");
                                             }
                                             else
                                             {
                                                if(email == null)
                                                {
                                                   System.err.println("Email faltando");
                                                }
                                                else
                                                {
                                                   try
                                                   {
                                                      java.util.Date birthday = sd.parse(dateOfBirth);
                                                      java.sql.Date sqlDateOfBirth = new java.sql.Date(birthday.getTime());
                                                      dsproject.Aluno student = new Aluno(nameOfMother, nameOfFather, name, sqlDateOfBirth, gender, address, city, state);
                                                      File fileStudents = new File("alunos.txt");
                                                      if(fileStudents.exists())
                                                      {
                                                         FileInputStream file = new FileInputStream(fileStudents);
                                                         in = new ObjectInputStream(file);
                                                         students = (ArrayList<Aluno>)in.readObject();
                                                         students.add(student);
                                                         out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                         out.writeObject(students);
                                                         out.close();
                                                         JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                         Interface.ClassPanel.setStudentAddedComboStudent(true);
                                                         Interface.ClassPanel.setStudentAddedComboAddStudent(true);
                                                         Interface.ClassPanel.setStudentAddedComboStudentName(true);
                                                         setStudentAddedComboName(true);
                                                         setStudentAddedComboStudent(true);
                                                         setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                         setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAddStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAddStudent() 
                                                                                                                             + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudent()
                                                                                                                          + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudentName(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudentName()
                                                                                                                          + 1);
                                                         clearFields();
                                                      }
                                                      else
                                                      {
                                                         students.add(student);
                                                         out = new ObjectOutputStream(new FileOutputStream("alunos.txt"));
                                                         out.writeObject(students);
                                                         out.close();
                                                         JOptionPane.showMessageDialog(null, "Aluno salvo com sucesso", "Confirmação!", JOptionPane.INFORMATION_MESSAGE);
                                                         Interface.ClassPanel.setStudentAddedComboStudent(true);
                                                         Interface.ClassPanel.setStudentAddedComboAddStudent(true);
                                                         Interface.ClassPanel.setStudentAddedComboStudentName(true);
                                                         setStudentAddedComboName(true);
                                                         setStudentAddedComboStudent(true);
                                                         setNumeroDeAlunosAdicionadosComboName(getNumeroDeAlunosAdicionadosComboName() + 1);
                                                         setNumeroDeAlunosAdicionadosComboStudent(getNumeroDeAlunosAdicionadosComboStudent() + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboAddStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboAddStudent() 
                                                                                                                             + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudent(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudent()
                                                                                                                          + 1);
                                                         Interface.ClassPanel.setNumeroDeAlunosAdicionadosComboStudentName(Interface.ClassPanel.getNumeroDeAlunosAdicionadosComboStudentName()
                                                                                                                          + 1);
                                                         clearFields();
                                                      }

                                                   }
                                                   catch (ParseException | IOException | ClassNotFoundException ex)
                                                   {
                                                      System.err.println(ex);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_buttonRegisterActionPerformed

   private void fieldDateOfBirthKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_fieldDateOfBirthKeyTyped
   {//GEN-HEADEREND:event_fieldDateOfBirthKeyTyped
      if(!Character.isDigit(evt.getKeyChar()))
      {
         evt.setKeyChar('\0');
      }
      else
      {
         String textoCampo = fieldDateOfBirth.getText();
         if(textoCampo.length() == 2)
            fieldDateOfBirth.setText(textoCampo + "/");
         else
         {
            if(textoCampo.length() == 5)
               fieldDateOfBirth.setText(textoCampo + "/");
            else
            {
               if(textoCampo.length() > 9)
                  evt.setKeyChar('\0');
            }
         }
      }
   }//GEN-LAST:event_fieldDateOfBirthKeyTyped

   private void comboStudentPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboStudentPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboStudentPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboStudent.getItemAt(0);
      int i = 0;
      ArrayList<Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboStudent() && isNull == null)
      {
         //daqui até o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<Aluno>)in.readObject();
               i = 0;
               comboStudent.addItem("");
               while(i < students.size())
               {
                  comboStudent.addItem(students.get(i).getName());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboStudent(false);
         setNumeroDeAlunosAdicionadosComboStudent(0);
      }
      else
      {
         if(isStudentAddedComboStudent() && isNull != null)
         {
            //daqui até o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboStudent());
                  while(i < students.size())
                  {
                     comboStudent.addItem(students.get(i).getName());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboStudent(false);
            setNumeroDeAlunosAdicionadosComboStudent(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<Aluno>)in.readObject();
                     comboStudent.addItem("");
                     while(i < students.size())
                     {
                        comboStudent.addItem(students.get(i).getName());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboStudentPopupMenuWillBecomeVisible

   private void comboNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboNamePopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboNamePopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboName.getItemAt(0);
      int i = 0;
      ArrayList<Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboName()&& isNull == null)
      {
         //daqui até o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<Aluno>)in.readObject();
               i = 0;
               comboName.addItem("");
               while(i < students.size())
               {
                  comboName.addItem(students.get(i).getName());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboName(false);
         setNumeroDeAlunosAdicionadosComboName(0);
      }
      else
      {
         if(isStudentAddedComboName() && isNull != null)
         {
            //daqui até o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboName());
                  while(i < students.size())
                  {
                     comboName.addItem(students.get(i).getName());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboName(false);
            setNumeroDeAlunosAdicionadosComboName(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui até o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<Aluno>)in.readObject();
                     comboName.addItem("");
                     while(i < students.size())
                     {
                        comboName.addItem(students.get(i).getName());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboNamePopupMenuWillBecomeVisible


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel adressStudent2;
   private javax.swing.JTextField adressTextField2;
   private javax.swing.JLabel birthdayStudent2;
   private javax.swing.JTextField birthdaylTextField2;
   private javax.swing.JButton buttonRegister;
   private javax.swing.JLabel cellphoneStudent2;
   private javax.swing.JTextField cellphoneTextField2;
   private static javax.swing.JComboBox comboGender;
   private static javax.swing.JComboBox comboName;
   private javax.swing.JComboBox comboStudent;
   private javax.swing.JPanel deleteStudentPanel;
   private javax.swing.JPanel editStudentPanel;
   private javax.swing.JLabel emailStudent2;
   private javax.swing.JTextField emailTextField2;
   private javax.swing.JLabel fatherStudent2;
   private javax.swing.JTextField fatherTextField2;
   private static javax.swing.JTextField fieldAddress;
   private static javax.swing.JTextField fieldCellPhone;
   private static javax.swing.JTextField fieldCity;
   private static javax.swing.JTextField fieldDateOfBirth;
   private static javax.swing.JTextField fieldEmail;
   private static javax.swing.JTextField fieldName;
   private static javax.swing.JTextField fieldNameOfFather;
   private static javax.swing.JTextField fieldNameOfMother;
   private static javax.swing.JTextField fieldState;
   private static javax.swing.JTextField fieldTelephone;
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JTabbedPane jTabbedPane1;
   private static javax.swing.JLabel labelAddress;
   private static javax.swing.JLabel labelCellPhone;
   private static javax.swing.JLabel labelCity;
   private static javax.swing.JLabel labelDateOfBirth;
   private static javax.swing.JLabel labelEmail;
   private static javax.swing.JLabel labelGender;
   private static javax.swing.JLabel labelName;
   private static javax.swing.JLabel labelNameOfFather;
   private static javax.swing.JLabel labelNameOfMother;
   private static javax.swing.JLabel labelState;
   private static javax.swing.JLabel labelTelephone;
   private javax.swing.JLabel motherStudent2;
   private javax.swing.JTextField motherTextField2;
   private javax.swing.JLabel nameStudent2;
   private javax.swing.JLabel nameStudentDelete;
   private javax.swing.JPanel newStudentPanel;
   private javax.swing.JLabel phoneStudent2;
   private javax.swing.JTextField phoneTextField2;
   private javax.swing.JButton saveStudent;
   private javax.swing.JComboBox studentComboBox1;
   // End of variables declaration//GEN-END:variables
   private static boolean studentAddedComboStudent;
   private static boolean studentAddedComboName;
   private int numeroDeAlunosAdicionadosComboStudent = 0;
   private int numeroDeAlunosAdicionadosComboName = 0;

   public int getNumeroDeAlunosAdicionadosComboStudent()
   {
      return numeroDeAlunosAdicionadosComboStudent;
   }

   public void setNumeroDeAlunosAdicionadosComboStudent(int numeroDeAlunosAdicionadosComboStudent)
   {
      this.numeroDeAlunosAdicionadosComboStudent = numeroDeAlunosAdicionadosComboStudent;
   }

   public int getNumeroDeAlunosAdicionadosComboName()
   {
      return numeroDeAlunosAdicionadosComboName;
   }

   public void setNumeroDeAlunosAdicionadosComboName(int numeroDeAlunosAdicionadosComboName)
   {
      this.numeroDeAlunosAdicionadosComboName = numeroDeAlunosAdicionadosComboName;
   }
   
   public static boolean isStudentAddedComboStudent()
   {
      return studentAddedComboStudent;
   }
   
   public static void setStudentAddedComboStudent(boolean studentAdded)
   {
      StudentPanel.studentAddedComboStudent = studentAdded;
   }

   public static boolean isStudentAddedComboName()
   {
      return studentAddedComboName;
   }

   public static void setStudentAddedComboName(boolean studentAddedComboName)
   {
      StudentPanel.studentAddedComboName = studentAddedComboName;
   }
   
   public static String getFieldName()
   {
      if(fieldName.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelName.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldName.getText();
      }
   }

   public static String getFieldDateOfBirth()
   {
      if(fieldDateOfBirth.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite uma " + labelDateOfBirth.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldDateOfBirth.getText();
      }
   }

   public static String getComboGender()
   {
      if(comboGender.getSelectedIndex() == -1)
      {
         JOptionPane.showMessageDialog(null, "Escolha um " + labelGender.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return comboGender.getSelectedItem().toString();
      }
   }
   
   public static String getFieldAddress()
   {
      if(fieldAddress.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelAddress.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldAddress.getText();
      }
   }
   
   public static String getFieldCity()
   {
      if(fieldCity.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite uma " + labelCity.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldCity.getText();
      }
   }
   
   public static String getFieldState()
   {
      if(fieldState.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelState.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldState.getText();
      }
   }
   
   public static String getFieldNameOfMother()
   {
      if(fieldNameOfMother.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelNameOfMother.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldNameOfMother.getText();
      }
   }
   
   public static String getFieldNameOfFather()
   {
      if(fieldNameOfFather.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelNameOfFather.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldNameOfFather.getText();
      }
   }
   
   public static String getFieldTelephone()
   {
      if(fieldTelephone.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelTelephone.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldTelephone.getText();
      }
   }

   public static String getFieldCellPhone()
   {
      if(fieldCellPhone.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelCellPhone.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldCellPhone.getText();
      }
   }

   public static String getFieldEmail()
   {
      if(fieldEmail.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelEmail.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldEmail.getText();
      }
   }
   
   public void clearFields()
   {
      fieldName.setText("");
      fieldAddress.setText("");
      fieldCellPhone.setText("");
      fieldCity.setText("");
      fieldDateOfBirth.setText("");
      fieldEmail.setText("");
      fieldNameOfFather.setText("");
      fieldNameOfMother.setText("");
      fieldState.setText("");
      fieldTelephone.setText("");
   }
}
