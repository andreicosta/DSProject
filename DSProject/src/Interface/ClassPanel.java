/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClassPanel.java
 *
 * Created on 14/06/2013, 15:48:46
 */
package Interface;

import static Interface.StudentPanel.isStudentAddedComboStudent;
import static Interface.StudentPanel.setStudentAddedComboStudent;
import dsproject.Aluno;
import dsproject.Turma;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author GÃ¼nther
 */
public class ClassPanel extends javax.swing.JPanel {

    /** Creates new form ClassPanel */
    public ClassPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      listClassesPanel = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      listaListaDeTurmas = new DefaultListModel();
      listaDeTurmas = new javax.swing.JList(listaListaDeTurmas);
      newClassPanel = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      labelStudent = new javax.swing.JLabel();
      comboStudent = new javax.swing.JComboBox();
      buttonAdd = new javax.swing.JButton();
      jLabel4 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      listaAlunosMatriculados = new DefaultListModel();
      listStudentsEnrolled = new javax.swing.JList(listaAlunosMatriculados);
      labelClass = new javax.swing.JLabel();
      fieldClass = new javax.swing.JTextField();
      labelSchoolYear = new javax.swing.JLabel();
      fieldSchoolYear = new javax.swing.JTextField();
      botaoCadastrar = new javax.swing.JButton();
      buttonRemoveStudent = new javax.swing.JButton();
      editClassPanel = new javax.swing.JPanel();
      jLabel5 = new javax.swing.JLabel();
      jComboBox2 = new javax.swing.JComboBox();
      jLabel7 = new javax.swing.JLabel();
      classTextField3 = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      comboAddStudent = new javax.swing.JComboBox();
      jButton3 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jComboBox4 = new javax.swing.JComboBox();
      jLabel9 = new javax.swing.JLabel();
      jButton5 = new javax.swing.JButton();
      findClassPanel = new javax.swing.JPanel();
      nameStudentClassLabel = new javax.swing.JLabel();
      comboStudentName = new javax.swing.JComboBox();
      classLabel = new javax.swing.JLabel();
      returnClassLabel = new javax.swing.JLabel();
      deleteClassPanel = new javax.swing.JPanel();
      jLabel10 = new javax.swing.JLabel();
      jComboBox5 = new javax.swing.JComboBox();
      jButton6 = new javax.swing.JButton();

      listClassesPanel.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            listClassesPanelComponentShown(evt);
         }
      });

      listaDeTurmas.setBackground(new java.awt.Color(240, 240, 240));
      jScrollPane2.setViewportView(listaDeTurmas);

      javax.swing.GroupLayout listClassesPanelLayout = new javax.swing.GroupLayout(listClassesPanel);
      listClassesPanel.setLayout(listClassesPanelLayout);
      listClassesPanelLayout.setHorizontalGroup(
         listClassesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(listClassesPanelLayout.createSequentialGroup()
            .addGap(31, 31, 31)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(22, Short.MAX_VALUE))
      );
      listClassesPanelLayout.setVerticalGroup(
         listClassesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(listClassesPanelLayout.createSequentialGroup()
            .addGap(33, 33, 33)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(72, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Lista de Turmas", listClassesPanel);

      jLabel2.setText("Adicionar Alunos");

      labelStudent.setText("Aluno");

      comboStudent.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboStudentPopupMenuWillBecomeVisible(evt);
         }
      });

      buttonAdd.setText("Adicionar");
      buttonAdd.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            buttonAddActionPerformed(evt);
         }
      });

      jLabel4.setText("Alunos matriculados na turma");

      listStudentsEnrolled.setBackground(new java.awt.Color(240, 240, 240));
      listStudentsEnrolled.setForeground(new java.awt.Color(51, 51, 51));
      jScrollPane1.setViewportView(listStudentsEnrolled);

      labelClass.setText("Turma");

      labelSchoolYear.setText("Ano Letivo");

      fieldSchoolYear.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyTyped(java.awt.event.KeyEvent evt)
         {
            fieldSchoolYearKeyTyped(evt);
         }
      });

      botaoCadastrar.setText("Cadastrar");
      botaoCadastrar.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoCadastrarActionPerformed(evt);
         }
      });

      buttonRemoveStudent.setText("Remover Aluno");
      buttonRemoveStudent.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            buttonRemoveStudentActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout newClassPanelLayout = new javax.swing.GroupLayout(newClassPanel);
      newClassPanel.setLayout(newClassPanelLayout);
      newClassPanelLayout.setHorizontalGroup(
         newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newClassPanelLayout.createSequentialGroup()
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(labelClass)
                  .addGap(32, 32, 32)
                  .addComponent(fieldClass, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(70, 70, 70)
                  .addComponent(labelSchoolYear)
                  .addGap(41, 41, 41)
                  .addComponent(fieldSchoolYear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1))
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(newClassPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(labelStudent)
                        .addGap(18, 18, 18)
                        .addComponent(comboStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAdd))
                     .addComponent(jLabel2)
                     .addComponent(jLabel4)))
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addGap(29, 29, 29)
                  .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addGroup(newClassPanelLayout.createSequentialGroup()
                        .addComponent(buttonRemoveStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoCadastrar))
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
      newClassPanelLayout.setVerticalGroup(
         newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newClassPanelLayout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelClass)
               .addComponent(labelSchoolYear)
               .addComponent(fieldSchoolYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fieldClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(comboStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(buttonAdd)
               .addComponent(labelStudent))
            .addGap(18, 18, 18)
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(botaoCadastrar)
               .addComponent(buttonRemoveStudent))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Cadastrar Turma", newClassPanel);

      jLabel5.setText("Turma");

      jLabel7.setText("Ano Letivo");

      jLabel8.setText("Adicionar Aluno");

      comboAddStudent.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboAddStudentPopupMenuWillBecomeVisible(evt);
         }
      });

      jButton3.setText("Remover");

      jButton4.setText("Adicionar");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton4ActionPerformed(evt);
         }
      });

      jLabel9.setText(" Remover Aluno");

      jButton5.setText("Salvar");

      javax.swing.GroupLayout editClassPanelLayout = new javax.swing.GroupLayout(editClassPanel);
      editClassPanel.setLayout(editClassPanelLayout);
      editClassPanelLayout.setHorizontalGroup(
         editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(editClassPanelLayout.createSequentialGroup()
                  .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel8)
                     .addComponent(jLabel9)
                     .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGroup(editClassPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(comboAddStudent, 0, 544, Short.MAX_VALUE)
                           .addComponent(jComboBox4, 0, 544, Short.MAX_VALUE))))
                  .addGap(18, 18, 18))
               .addGroup(editClassPanelLayout.createSequentialGroup()
                  .addComponent(jLabel5)
                  .addGap(31, 31, 31)
                  .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(56, 56, 56)
                  .addComponent(jLabel7)
                  .addGap(32, 32, 32)
                  .addComponent(classTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(137, Short.MAX_VALUE))))
      );
      editClassPanelLayout.setVerticalGroup(
         editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editClassPanelLayout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel5)
               .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel7)
               .addComponent(classTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(39, 39, 39)
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(comboAddStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton4)
            .addGap(18, 18, 18)
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
            .addComponent(jButton5)
            .addGap(22, 22, 22))
      );

      jTabbedPane1.addTab("Editar Turma", editClassPanel);

      nameStudentClassLabel.setText("Nome do Aluno");

      comboStudentName.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboStudentNamePopupMenuWillBecomeVisible(evt);
         }
      });

      classLabel.setText("Turma");

      javax.swing.GroupLayout findClassPanelLayout = new javax.swing.GroupLayout(findClassPanel);
      findClassPanel.setLayout(findClassPanelLayout);
      findClassPanelLayout.setHorizontalGroup(
         findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(findClassPanelLayout.createSequentialGroup()
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(nameStudentClassLabel)
                  .addGap(18, 18, 18)
                  .addComponent(comboStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addGap(77, 77, 77)
                  .addComponent(returnClassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(classLabel)))
            .addContainerGap(60, Short.MAX_VALUE))
      );
      findClassPanelLayout.setVerticalGroup(
         findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(findClassPanelLayout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(nameStudentClassLabel)
               .addComponent(comboStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(49, 49, 49)
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(returnClassLabel)
               .addComponent(classLabel))
            .addContainerGap(287, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Buscar Turma por Aluno", findClassPanel);

      jLabel10.setText("Turma");

      jButton6.setText("Remover");

      javax.swing.GroupLayout deleteClassPanelLayout = new javax.swing.GroupLayout(deleteClassPanel);
      deleteClassPanel.setLayout(deleteClassPanelLayout);
      deleteClassPanelLayout.setHorizontalGroup(
         deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteClassPanelLayout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(jLabel10)
            .addGap(45, 45, 45)
            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(359, Short.MAX_VALUE))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteClassPanelLayout.createSequentialGroup()
            .addContainerGap(446, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(50, 50, 50))
      );
      deleteClassPanelLayout.setVerticalGroup(
         deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteClassPanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addGroup(deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel10)
               .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(jButton6)
            .addContainerGap(305, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Remover Turma", deleteClassPanel);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

   private void comboStudentPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboStudentPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboStudentPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboStudent.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboStudent() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboStudent.addItem("");
               while(i < students.size())
               {
                  comboStudent.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboStudent(false);
         setNumeroDeAlunosAdicionadosComboStudent(0);
      }
      else
      {
         if(isStudentAddedComboStudent() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboStudent());
                  while(i < students.size())
                  {
                     comboStudent.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboStudent(false);
            setNumeroDeAlunosAdicionadosComboStudent(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboStudent.addItem("");
                     while(i < students.size())
                     {
                        comboStudent.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboStudentPopupMenuWillBecomeVisible

   private void buttonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonAddActionPerformed
   {//GEN-HEADEREND:event_buttonAddActionPerformed
      //DefaultListModel listaAlunosMatriculados = new DefaultListModel();
      //listStudentsEnrolled.getModel().(comboStudent.getSelectedItem().toString());
      if(comboStudent.getSelectedItem() != null && comboStudent.getSelectedItem() != "")
      {
         listaAlunosMatriculados.addElement(comboStudent.getSelectedItem());
      }
   }//GEN-LAST:event_buttonAddActionPerformed

   private void buttonRemoveStudentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRemoveStudentActionPerformed
   {//GEN-HEADEREND:event_buttonRemoveStudentActionPerformed
      try
      {
         ArrayList<dsproject.Aluno> students = (ArrayList<dsproject.Aluno>) listStudentsEnrolled.getSelectedValuesList();
         for(int i = 0; i < students.size(); i++)
            listaAlunosMatriculados.removeElement(students.get(i));
      }
      catch(ClassCastException ex)
      {
         JOptionPane.showMessageDialog(null, "Selecione algum aluno na lista", "Erro", JOptionPane.ERROR_MESSAGE);
         System.err.println(ex);
      }
   }//GEN-LAST:event_buttonRemoveStudentActionPerformed

   private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botaoCadastrarActionPerformed
   {//GEN-HEADEREND:event_botaoCadastrarActionPerformed
      String campoTurma = getFieldClass();
      String campoAnoLetivo = getFieldSchoolYear();
      if(campoTurma != null)
      {
         if(campoAnoLetivo != null)
         {
            ArrayList<dsproject.Aluno> alunosLidos = new ArrayList<>();
            ArrayList<dsproject.Turma> turmas = new ArrayList<>();
            ArrayList<String> alunos = new ArrayList<>();
            ObjectInputStream in;
            ObjectOutputStream out;
            int i;
            int y;
            
            //criar nova turma com os alunos selecionados na lista falta adicionar o professor na turma
            Turma novaTurma = new Turma(campoTurma, Integer.parseInt(campoAnoLetivo), null);
            try
            {
               if(listStudentsEnrolled.getModel().getSize() != 0)
               {
                  for(i = 0; i < listStudentsEnrolled.getModel().getSize(); i++)
                  {
                     alunos.add(listStudentsEnrolled.getModel().getElementAt(i).toString());
                  }
                  //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
                  File arquivoAlunos = new File("alunos.txt");
                  if(arquivoAlunos.exists())
                  {
                     FileInputStream arquivo;
                     try
                     {
                        arquivo = new FileInputStream(arquivoAlunos);
                        in = new ObjectInputStream(arquivo);
                        alunosLidos = (ArrayList<dsproject.Aluno>)in.readObject();
                        i = 0;
                        y = 0;
                        while(i < alunos.size())
                        {
                           if(alunosLidos.get(y).getNome().equals(alunos.get(i)))
                           {
                              alunosLidos.get(y).setTurmaId(campoTurma);
                              novaTurma.inserirAluno(alunosLidos.get(y));
                              i++;
                              y = 0;
                           }
                           y++;
                        }
                        File arquivoTurma = new File("turmas.txt");
                        if(arquivoTurma.exists())
                        {
                           arquivo = new FileInputStream(arquivoTurma);
                           in = new ObjectInputStream(arquivo);
                           turmas = (ArrayList<dsproject.Turma>)in.readObject();
                           turmas.add(novaTurma);
                           out = new ObjectOutputStream(new FileOutputStream("turmas.txt"));
                           out.writeObject(turmas);
                           out.close();
                           setTurmaAdicionada(true);
                           setNumeroDeTurmasAdicionadas(getNumeroDeTurmasAdicionadas() + 1);
                           JOptionPane.showMessageDialog(null, "Turma salva com sucesso", "ConfirmaÃ§Ã£o!", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else
                        {
                           turmas.add(novaTurma);
                           out = new ObjectOutputStream(new FileOutputStream("turmas.txt"));
                           out.writeObject(turmas);
                           out.close();
                           setTurmaAdicionada(true);
                           setNumeroDeTurmasAdicionadas(getNumeroDeTurmasAdicionadas() + 1);
                           JOptionPane.showMessageDialog(null, "Turma salva com sucesso", "ConfirmaÃ§Ã£o!", JOptionPane.INFORMATION_MESSAGE);
                        }
                     }
                     catch (IOException | ClassNotFoundException ex)
                     {
                        System.err.println(ex);
                     }
                  }
                  else
                  {
                     JOptionPane.showMessageDialog(null, "NÃ£o existem alunos cadastrados", "Erro", JOptionPane.ERROR_MESSAGE);
                  }
               }
               else
                  JOptionPane.showMessageDialog(null, "Adicione algum aluno na lista", "Erro", JOptionPane.ERROR_MESSAGE);
            }
            catch(ClassCastException ex)
            {
               
               System.err.println(ex);
            }
         }
         else
         {
            System.err.println("Falta Ano Letivo");
         }
      }
      else
      {
         System.err.println("Falta Nome da Turma");
      }
   }//GEN-LAST:event_botaoCadastrarActionPerformed

   private void fieldSchoolYearKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_fieldSchoolYearKeyTyped
   {//GEN-HEADEREND:event_fieldSchoolYearKeyTyped
      if(!Character.isDigit(evt.getKeyChar()))
      {
         evt.setKeyChar('\0');
      }
      else
      {
         String textoCampo = fieldSchoolYear.getText();
         if(textoCampo.length() > 3)
            evt.setKeyChar('\0');
      }
   }//GEN-LAST:event_fieldSchoolYearKeyTyped

   private void comboAddStudentPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboAddStudentPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboAddStudentPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboAddStudent.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboAddStudent() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboAddStudent.addItem("");
               while(i < students.size())
               {
                  comboAddStudent.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboAddStudent(false);
         setNumeroDeAlunosAdicionadosComboAddStudent(0);
      }
      else
      {
         if(isStudentAddedComboAddStudent() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboAddStudent());
                  while(i < students.size())
                  {
                     comboAddStudent.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboAddStudent(false);
            setNumeroDeAlunosAdicionadosComboAddStudent(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboAddStudent.addItem("");
                     while(i < students.size())
                     {
                        comboAddStudent.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboAddStudentPopupMenuWillBecomeVisible

   private void comboStudentNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboStudentNamePopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboStudentNamePopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboStudentName.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> students = null;
      ObjectInputStream in;
      if(isStudentAddedComboStudentName() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         File fileStudents = new File("alunos.txt");
         if(fileStudents.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(fileStudents);
               in = new ObjectInputStream(file);
               students = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboStudentName.addItem("");
               while(i < students.size())
               {
                  comboStudentName.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboStudentName(false);
         setNumeroDeAlunosAdicionadosComboStudentName(0);
      }
      else
      {
         if(isStudentAddedComboStudentName() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            File fileStudents = new File("alunos.txt");
            if(fileStudents.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(fileStudents);
                  in = new ObjectInputStream(file);
                  students = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboStudentName());
                  while(i < students.size())
                  {
                     comboStudentName.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboStudentName(false);
            setNumeroDeAlunosAdicionadosComboStudentName(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               File fileStudents = new File("alunos.txt");
               if(fileStudents.exists())
               {
                  FileInputStream file;
                  try
                  {
                     file = new FileInputStream(fileStudents);
                     in = new ObjectInputStream(file);
                     students = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboStudentName.addItem("");
                     while(i < students.size())
                     {
                        comboStudentName.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboStudentNamePopupMenuWillBecomeVisible

   private void listClassesPanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_listClassesPanelComponentShown
   {//GEN-HEADEREND:event_listClassesPanelComponentShown
      Object isNull;
      isNull = listaListaDeTurmas.getSize();
      int i = 0;
      ArrayList<dsproject.Turma> turmas = null;
      ObjectInputStream in;
      if(isTurmaAdicionada() && isNull == 0)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo turmas.txt
         File arquivoTurmas = new File("turmas.txt");
         if(arquivoTurmas.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(arquivoTurmas);
               in = new ObjectInputStream(file);
               turmas = (ArrayList<dsproject.Turma>)in.readObject();
               i = 0;
               while(i < turmas.size())
               {
                  listaListaDeTurmas.addElement(turmas.get(i).getId());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setTurmaAdicionada(false);
         setNumeroDeTurmasAdicionadas(0);
      }
      else
      {
         if(isTurmaAdicionada() && isNull != 0)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            File arquivoTurmas = new File("turmas.txt");
            if(arquivoTurmas.exists())
            {
               FileInputStream arquivo;
               try
               {
                  arquivo = new FileInputStream(arquivoTurmas);
                  in = new ObjectInputStream(arquivo);
                  turmas = (ArrayList<dsproject.Turma>)in.readObject();
                  i = (turmas.size() - getNumeroDeTurmasAdicionadas());
                  while(i < turmas.size())
                  {
                     listaListaDeTurmas.addElement(turmas.get(i).getId());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setTurmaAdicionada(false);
            setNumeroDeTurmasAdicionadas(0);
         }
         else
         {
            if(isNull == 0)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               File arquivoTurmas = new File("turmas.txt");
               if(arquivoTurmas.exists())
               {
                  FileInputStream arquivo;
                  try
                  {
                     arquivo = new FileInputStream(arquivoTurmas);
                     in = new ObjectInputStream(arquivo);
                     turmas = (ArrayList<dsproject.Turma>)in.readObject();
                     while(i < turmas.size())
                     {
                        listaListaDeTurmas.addElement(turmas.get(i).getId());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
               else
               {
                  JOptionPane.showMessageDialog(null, "NÃ£o existe nenhuma turma cadastrada", "Erro", JOptionPane.ERROR_MESSAGE);
               }
            }
         }
      }
   }//GEN-LAST:event_listClassesPanelComponentShown

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton botaoCadastrar;
   private static javax.swing.JButton buttonAdd;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JButton buttonRemoveStudent;
   private javax.swing.JLabel classLabel;
   private javax.swing.JTextField classTextField3;
   private static javax.swing.JComboBox comboAddStudent;
   private static javax.swing.JComboBox comboStudent;
   private javax.swing.JComboBox comboStudentName;
   private javax.swing.JPanel deleteClassPanel;
   private javax.swing.JPanel editClassPanel;
   private static javax.swing.JTextField fieldClass;
   private static javax.swing.JTextField fieldSchoolYear;
   private javax.swing.JPanel findClassPanel;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JButton jButton6;
   private javax.swing.JComboBox jComboBox2;
   private javax.swing.JComboBox jComboBox4;
   private javax.swing.JComboBox jComboBox5;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTabbedPane jTabbedPane1;
   private static javax.swing.JLabel labelClass;
   private static javax.swing.JLabel labelSchoolYear;
   private javax.swing.JLabel labelStudent;
   private javax.swing.JPanel listClassesPanel;
   private static javax.swing.JList listStudentsEnrolled;
   private javax.swing.JList listaDeTurmas;
   private javax.swing.JLabel nameStudentClassLabel;
   private javax.swing.JPanel newClassPanel;
   private javax.swing.JLabel returnClassLabel;
   // End of variables declaration//GEN-END:variables
   private static DefaultListModel listaAlunosMatriculados;
   private static DefaultListModel listaListaDeTurmas;
   private static boolean studentAddedComboStudent;
   private static boolean studentAddedComboStudentName;
   private static boolean studentAddedComboAddStudent;
   private static boolean turmaAdicionada;
   private static int numeroDeTurmasAdicionadas = 0;
   private static int numeroDeAlunosAdicionadosComboStudent = 0;
   private static int numeroDeAlunosAdicionadosComboStudentName = 0;
   private static int numeroDeAlunosAdicionadosComboAddStudent = 0;

   public static boolean isTurmaAdicionada()
   {
      return turmaAdicionada;
   }

   public static void setTurmaAdicionada(boolean turmaAdicionada)
   {
      ClassPanel.turmaAdicionada = turmaAdicionada;
   }

   public static int getNumeroDeTurmasAdicionadas()
   {
      return numeroDeTurmasAdicionadas;
   }

   public static void setNumeroDeTurmasAdicionadas(int numeroDeTurmasAdicionadas)
   {
      ClassPanel.numeroDeTurmasAdicionadas = numeroDeTurmasAdicionadas;
   }
   
   public static int getNumeroDeAlunosAdicionadosComboStudent()
   {
      return numeroDeAlunosAdicionadosComboStudent;
   }

   public static void setNumeroDeAlunosAdicionadosComboStudent(int numeroDeAlunosAdicionadosComboStudent)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboStudent = numeroDeAlunosAdicionadosComboStudent;
   }

   public static int getNumeroDeAlunosAdicionadosComboStudentName()
   {
      return numeroDeAlunosAdicionadosComboStudentName;
   }

   public static void setNumeroDeAlunosAdicionadosComboStudentName(int numeroDeAlunosAdicionadosComboStudentName)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboStudentName = numeroDeAlunosAdicionadosComboStudentName;
   }

   public static int getNumeroDeAlunosAdicionadosComboAddStudent()
   {
      return numeroDeAlunosAdicionadosComboAddStudent;
   }

   public static void setNumeroDeAlunosAdicionadosComboAddStudent(int numeroDeAlunosAdicionadosComboAddStudent)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboAddStudent = numeroDeAlunosAdicionadosComboAddStudent;
   }
   
   public static boolean isStudentAddedComboStudent()
   {
      return studentAddedComboStudent;
   }

   public static boolean isStudentAddedComboStudentName()
   {
      return studentAddedComboStudentName;
   }

   public static boolean isStudentAddedComboAddStudent()
   {
      return studentAddedComboAddStudent;
   }

   public static void setStudentAddedComboStudentName(boolean studentAddedComboStudentName)
   {
      ClassPanel.studentAddedComboStudentName = studentAddedComboStudentName;
   }

   public static void setStudentAddedComboAddStudent(boolean studentAddedComboAddStudent)
   {
      ClassPanel.studentAddedComboAddStudent = studentAddedComboAddStudent;
   }
   
   public static void setStudentAddedComboStudent(boolean studentAdded)
   {
      ClassPanel.studentAddedComboStudent = studentAdded;
   }

   public static String getFieldClass()
   {
      if(fieldClass.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um nome para a " + labelClass.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldClass.getText();
      }
   }

   public static String getFieldSchoolYear()
   {
      if(fieldSchoolYear.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelSchoolYear.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return fieldSchoolYear.getText();
      }
   }
   
}
