/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClassPanel.java
 *
 * Created on 14/06/2013, 15:48:46
 */
package Interface;

import dsproject.Aluno;
import dsproject.Turma;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author GÃ¼nther
 */
public class ClassPanel extends javax.swing.JPanel {

    /** Creates new form ClassPanel */
    public ClassPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      listClassesPanel = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      listaListaDeTurmas = new DefaultListModel();
      listaDeTurmas = new javax.swing.JList(listaListaDeTurmas);
      newClassPanel = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      labelAluno = new javax.swing.JLabel();
      comboAluno = new javax.swing.JComboBox();
      botaoAdicionar = new javax.swing.JButton();
      jLabel4 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      listaAlunosMatriculados = new DefaultListModel();
      listaAlunosMatriculadosNaTurma = new javax.swing.JList(listaAlunosMatriculados);
      labelTurma = new javax.swing.JLabel();
      campoTurma = new javax.swing.JTextField();
      labelAnoLetivo = new javax.swing.JLabel();
      campoAnoLetivo = new javax.swing.JTextField();
      botaoCadastrar = new javax.swing.JButton();
      botaoRemoverAluno = new javax.swing.JButton();
      editClassPanel = new javax.swing.JPanel();
      labelTurmaEditarTurma = new javax.swing.JLabel();
      comboTurmaEditarTurma = new javax.swing.JComboBox();
      labelAnoLetivoEditarTurma = new javax.swing.JLabel();
      campoAnoLetivoEditarTurma = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      comboAdicionarAluno = new javax.swing.JComboBox();
      botaoRemoverEditarTurma = new javax.swing.JButton();
      botaoAdicionarEditarTurma = new javax.swing.JButton();
      comboRemoverAluno = new javax.swing.JComboBox();
      jLabel9 = new javax.swing.JLabel();
      botaoSalvar = new javax.swing.JButton();
      findClassPanel = new javax.swing.JPanel();
      labelNomeDoAluno = new javax.swing.JLabel();
      comboNomeDoAluno = new javax.swing.JComboBox();
      labelTurmaBuscarTurmaPorAluno = new javax.swing.JLabel();
      returnClassLabel = new javax.swing.JLabel();
      deleteClassPanel = new javax.swing.JPanel();
      labelTurmaRemoverTurma = new javax.swing.JLabel();
      comboTurma = new javax.swing.JComboBox();
      botaoRemover = new javax.swing.JButton();

      listClassesPanel.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            listClassesPanelComponentShown(evt);
         }
      });

      listaDeTurmas.setBackground(new java.awt.Color(240, 240, 240));
      jScrollPane2.setViewportView(listaDeTurmas);

      javax.swing.GroupLayout listClassesPanelLayout = new javax.swing.GroupLayout(listClassesPanel);
      listClassesPanel.setLayout(listClassesPanelLayout);
      listClassesPanelLayout.setHorizontalGroup(
         listClassesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(listClassesPanelLayout.createSequentialGroup()
            .addGap(31, 31, 31)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(22, Short.MAX_VALUE))
      );
      listClassesPanelLayout.setVerticalGroup(
         listClassesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(listClassesPanelLayout.createSequentialGroup()
            .addGap(33, 33, 33)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(72, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Lista de Turmas", listClassesPanel);

      jLabel2.setText("Adicionar Alunos");

      labelAluno.setText("Aluno");

      comboAluno.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboAlunoPopupMenuWillBecomeVisible(evt);
         }
      });

      botaoAdicionar.setText("Adicionar");
      botaoAdicionar.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoAdicionarActionPerformed(evt);
         }
      });

      jLabel4.setText("Alunos matriculados na turma");

      listaAlunosMatriculadosNaTurma.setBackground(new java.awt.Color(240, 240, 240));
      listaAlunosMatriculadosNaTurma.setForeground(new java.awt.Color(51, 51, 51));
      jScrollPane1.setViewportView(listaAlunosMatriculadosNaTurma);

      labelTurma.setText("Turma");

      labelAnoLetivo.setText("Ano Letivo");

      campoAnoLetivo.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyTyped(java.awt.event.KeyEvent evt)
         {
            campoAnoLetivoKeyTyped(evt);
         }
      });

      botaoCadastrar.setText("Cadastrar");
      botaoCadastrar.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoCadastrarActionPerformed(evt);
         }
      });

      botaoRemoverAluno.setText("Remover Aluno");
      botaoRemoverAluno.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoRemoverAlunoActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout newClassPanelLayout = new javax.swing.GroupLayout(newClassPanel);
      newClassPanel.setLayout(newClassPanelLayout);
      newClassPanelLayout.setHorizontalGroup(
         newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newClassPanelLayout.createSequentialGroup()
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(labelTurma)
                  .addGap(32, 32, 32)
                  .addComponent(campoTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(70, 70, 70)
                  .addComponent(labelAnoLetivo)
                  .addGap(41, 41, 41)
                  .addComponent(campoAnoLetivo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1))
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(newClassPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(labelAluno)
                        .addGap(18, 18, 18)
                        .addComponent(comboAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoAdicionar))
                     .addComponent(jLabel2)
                     .addComponent(jLabel4)))
               .addGroup(newClassPanelLayout.createSequentialGroup()
                  .addGap(29, 29, 29)
                  .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addGroup(newClassPanelLayout.createSequentialGroup()
                        .addComponent(botaoRemoverAluno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoCadastrar))
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
      newClassPanelLayout.setVerticalGroup(
         newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(newClassPanelLayout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelTurma)
               .addComponent(labelAnoLetivo)
               .addComponent(campoAnoLetivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(campoTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(comboAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(botaoAdicionar)
               .addComponent(labelAluno))
            .addGap(18, 18, 18)
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(newClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(botaoCadastrar)
               .addComponent(botaoRemoverAluno))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Cadastrar Turma", newClassPanel);

      labelTurmaEditarTurma.setText("Turma");

      comboTurmaEditarTurma.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboTurmaEditarTurmaPopupMenuWillBecomeVisible(evt);
         }
      });
      comboTurmaEditarTurma.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            comboTurmaEditarTurmaItemStateChanged(evt);
         }
      });

      labelAnoLetivoEditarTurma.setText("Ano Letivo");

      jLabel8.setText("Adicionar Aluno");

      comboAdicionarAluno.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboAdicionarAlunoPopupMenuWillBecomeVisible(evt);
         }
      });

      botaoRemoverEditarTurma.setText("Remover");

      botaoAdicionarEditarTurma.setText("Adicionar");
      botaoAdicionarEditarTurma.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            botaoAdicionarEditarTurmaActionPerformed(evt);
         }
      });

      jLabel9.setText(" Remover Aluno");

      botaoSalvar.setText("Salvar");

      javax.swing.GroupLayout editClassPanelLayout = new javax.swing.GroupLayout(editClassPanel);
      editClassPanel.setLayout(editClassPanelLayout);
      editClassPanelLayout.setHorizontalGroup(
         editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(editClassPanelLayout.createSequentialGroup()
                  .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel8)
                     .addComponent(jLabel9)
                     .addComponent(botaoRemoverEditarTurma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(botaoAdicionarEditarTurma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(botaoSalvar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGroup(editClassPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(comboAdicionarAluno, 0, 544, Short.MAX_VALUE)
                           .addComponent(comboRemoverAluno, 0, 544, Short.MAX_VALUE))))
                  .addGap(18, 18, 18))
               .addGroup(editClassPanelLayout.createSequentialGroup()
                  .addComponent(labelTurmaEditarTurma)
                  .addGap(31, 31, 31)
                  .addComponent(comboTurmaEditarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(56, 56, 56)
                  .addComponent(labelAnoLetivoEditarTurma)
                  .addGap(32, 32, 32)
                  .addComponent(campoAnoLetivoEditarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(137, Short.MAX_VALUE))))
      );
      editClassPanelLayout.setVerticalGroup(
         editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(editClassPanelLayout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addGroup(editClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelTurmaEditarTurma)
               .addComponent(comboTurmaEditarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelAnoLetivoEditarTurma)
               .addComponent(campoAnoLetivoEditarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(39, 39, 39)
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(comboAdicionarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(botaoAdicionarEditarTurma)
            .addGap(18, 18, 18)
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(comboRemoverAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(botaoRemoverEditarTurma)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
            .addComponent(botaoSalvar)
            .addGap(22, 22, 22))
      );

      jTabbedPane1.addTab("Editar Turma", editClassPanel);

      labelNomeDoAluno.setText("Nome do Aluno");

      comboNomeDoAluno.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboNomeDoAlunoPopupMenuWillBecomeVisible(evt);
         }
      });

      labelTurmaBuscarTurmaPorAluno.setText("Turma");

      javax.swing.GroupLayout findClassPanelLayout = new javax.swing.GroupLayout(findClassPanel);
      findClassPanel.setLayout(findClassPanelLayout);
      findClassPanelLayout.setHorizontalGroup(
         findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(findClassPanelLayout.createSequentialGroup()
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(labelNomeDoAluno)
                  .addGap(18, 18, 18)
                  .addComponent(comboNomeDoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addGap(77, 77, 77)
                  .addComponent(returnClassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(findClassPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(labelTurmaBuscarTurmaPorAluno)))
            .addContainerGap(60, Short.MAX_VALUE))
      );
      findClassPanelLayout.setVerticalGroup(
         findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(findClassPanelLayout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelNomeDoAluno)
               .addComponent(comboNomeDoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(49, 49, 49)
            .addGroup(findClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(returnClassLabel)
               .addComponent(labelTurmaBuscarTurmaPorAluno))
            .addContainerGap(287, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Buscar Turma por Aluno", findClassPanel);

      labelTurmaRemoverTurma.setText("Turma");

      comboTurma.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
      {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
         {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
         {
            comboTurmaPopupMenuWillBecomeVisible(evt);
         }
      });

      botaoRemover.setText("Remover");

      javax.swing.GroupLayout deleteClassPanelLayout = new javax.swing.GroupLayout(deleteClassPanel);
      deleteClassPanel.setLayout(deleteClassPanelLayout);
      deleteClassPanelLayout.setHorizontalGroup(
         deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteClassPanelLayout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(labelTurmaRemoverTurma)
            .addGap(45, 45, 45)
            .addComponent(comboTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(359, Short.MAX_VALUE))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteClassPanelLayout.createSequentialGroup()
            .addContainerGap(446, Short.MAX_VALUE)
            .addComponent(botaoRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(50, 50, 50))
      );
      deleteClassPanelLayout.setVerticalGroup(
         deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(deleteClassPanelLayout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addGroup(deleteClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelTurmaRemoverTurma)
               .addComponent(comboTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(botaoRemover)
            .addContainerGap(305, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Remover Turma", deleteClassPanel);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

    private void botaoAdicionarEditarTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarEditarTurmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoAdicionarEditarTurmaActionPerformed

   private void comboAlunoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboAlunoPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboAlunoPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboAluno.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> alunos = null;
      File arquivoAlunos = new File("alunos.txt");
      FileInputStream arquivo;
      ObjectInputStream in;
      if(isStudentAddedComboAluno() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         if(arquivoAlunos.exists())
         {
            try
            {
               arquivo = new FileInputStream(arquivoAlunos);
               in = new ObjectInputStream(arquivo);
               alunos = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboAluno.addItem("");
               while(i < alunos.size())
               {
                  comboAluno.addItem(alunos.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboAluno(false);
         setNumeroDeAlunosAdicionadosComboAluno(0);
      }
      else
      {
         if(isStudentAddedComboAluno() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoAlunos.exists())
            {
               try
               {
                  arquivo = new FileInputStream(arquivoAlunos);
                  in = new ObjectInputStream(arquivo);
                  alunos = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (alunos.size() - getNumeroDeAlunosAdicionadosComboAluno());
                  while(i < alunos.size())
                  {
                     comboAluno.addItem(alunos.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboAluno(false);
            setNumeroDeAlunosAdicionadosComboAluno(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoAlunos.exists())
               {
                  //FileInputStream file;
                  try
                  {
                     arquivo = new FileInputStream(arquivoAlunos);
                     in = new ObjectInputStream(arquivo);
                     alunos = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboAluno.addItem("");
                     while(i < alunos.size())
                     {
                        comboAluno.addItem(alunos.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboAlunoPopupMenuWillBecomeVisible

   private void botaoAdicionarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botaoAdicionarActionPerformed
   {//GEN-HEADEREND:event_botaoAdicionarActionPerformed
      if(comboAluno.getSelectedItem() != null && comboAluno.getSelectedItem() != "")
      {
         listaAlunosMatriculados.addElement(comboAluno.getSelectedItem());
      }
   }//GEN-LAST:event_botaoAdicionarActionPerformed

   private void botaoRemoverAlunoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botaoRemoverAlunoActionPerformed
   {//GEN-HEADEREND:event_botaoRemoverAlunoActionPerformed
      try
      {
         ArrayList<dsproject.Aluno> students = (ArrayList<dsproject.Aluno>) listaAlunosMatriculadosNaTurma.getSelectedValuesList();
         for(int i = 0; i < students.size(); i++)
            listaAlunosMatriculados.removeElement(students.get(i));
      }
      catch(ClassCastException ex)
      {
         JOptionPane.showMessageDialog(null, "Selecione algum aluno na lista", "Erro", JOptionPane.ERROR_MESSAGE);
         System.err.println(ex);
      }
   }//GEN-LAST:event_botaoRemoverAlunoActionPerformed

   private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botaoCadastrarActionPerformed
   {//GEN-HEADEREND:event_botaoCadastrarActionPerformed
      String campoTurma = getCampoTurma();
      String campoAnoLetivo = getCampoAnoLetivo();
      File arquivoAlunos = new File("alunos.txt");
      File arquivoTurma = new File("turmas.txt");
      FileInputStream arquivo;
      if(campoTurma != null)
      {
         if(campoAnoLetivo != null)
         {
            ArrayList<dsproject.Aluno> alunosLidos;
            ArrayList<dsproject.Turma> turmas;
            ArrayList<String> alunosMatriculados = new ArrayList<>();
            ObjectInputStream in;
            ObjectOutputStream out;
            int i;
            int y;
            
            //criar nova turma com os alunos selecionados na lista falta adicionar o professor na turma
            Turma novaTurma = new Turma(campoTurma, Integer.parseInt(campoAnoLetivo), null);
            try
            {
               if(listaAlunosMatriculadosNaTurma.getModel().getSize() != 0)
               {
                  for(i = 0; i < listaAlunosMatriculadosNaTurma.getModel().getSize(); i++)
                  {
                     alunosMatriculados.add(listaAlunosMatriculadosNaTurma.getModel().getElementAt(i).toString());
                  }
                  //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
                  if(arquivoAlunos.exists())
                  {
                     try
                     {
                        arquivo = new FileInputStream(arquivoAlunos);
                        in = new ObjectInputStream(arquivo);
                        alunosLidos = (ArrayList<dsproject.Aluno>)in.readObject();
                        i = 0;
                        y = 0;
                        while(i < alunosMatriculados.size())
                        {
                           if(alunosLidos.get(y).getNome().equals(alunosMatriculados.get(i)))
                           {
                              alunosLidos.get(y).setTurmaId(campoTurma);
                              novaTurma.inserirAluno(alunosLidos.get(y));
                              i++;
                              y = 0;
                           }
                           y++;
                        }
                        if(arquivoTurma.exists())
                        {
                           if(!arquivoTurma.canWrite())
                              arquivoTurma.setWritable(true);
                           arquivo = new FileInputStream(arquivoTurma);
                           in = new ObjectInputStream(arquivo);
                           turmas = (ArrayList<dsproject.Turma>)in.readObject();
                           turmas.add(novaTurma);
                           out = new ObjectOutputStream(new FileOutputStream("turmas.txt"));
                           out.writeObject(turmas);
                           out.close();
                           //arquivo pode ser lido
                           arquivoTurma.setReadable(true);
                           if(arquivoTurma.canWrite())
                           {
                              //arquivo nao pode ser escrito por ninguÃ©m nem pelo seu prÃ³prio dono
                              arquivoTurma.setWritable(false, false);
                           }
                           setTurmaAdicionada(true);
                           setTurmaAdicionadaComboTurmaEditarTurmas(true);
                           setTurmaAdicionadaComboTurma(true);
                           Interface.TestPanel.setTurmaAdicionada(true);
                           Interface.TestPanel.setNumeroDeTurmasAdicionadas(Interface.TestPanel.getNumeroDeTurmasAdicionadas() + 1);
                           setNumeroDeTurmasAdicionadasComboTurma(getNumeroDeTurmasAdicionadasComboTurma() + 1);
                           setNumeroDeTurmasAdicionadas(getNumeroDeTurmasAdicionadas() + 1);
                           setNumeroDeTurmasAdicionadasComboTurmaEditarTurmas(getNumeroDeTurmasAdicionadasComboTurmaEditarTurmas() + 1);
                           JOptionPane.showMessageDialog(null, "Turma salva com sucesso", "ConfirmaÃ§Ã£o!", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else
                        {
                           turmas = new ArrayList<>();
                           turmas.add(novaTurma);
                           out = new ObjectOutputStream(new FileOutputStream("turmas.txt"));
                           out.writeObject(turmas);
                           out.close();
                           //arquivo pode ser lido
                           arquivoTurma.setReadable(true);
                           if(arquivoTurma.canWrite())
                           {
                              //arquivo nao pode ser escrito por ninguÃ©m nem pelo seu prÃ³prio dono
                              arquivoTurma.setWritable(false, false);
                           }
                           setTurmaAdicionada(true);
                           setTurmaAdicionadaComboTurmaEditarTurmas(true);
                           setTurmaAdicionadaComboTurma(true);
                           Interface.TestPanel.setTurmaAdicionada(true);
                           Interface.TestPanel.setNumeroDeTurmasAdicionadas(Interface.TestPanel.getNumeroDeTurmasAdicionadas() + 1);
                           setNumeroDeTurmasAdicionadasComboTurma(getNumeroDeTurmasAdicionadasComboTurma() + 1);
                           setNumeroDeTurmasAdicionadas(getNumeroDeTurmasAdicionadas() + 1);
                           setNumeroDeTurmasAdicionadasComboTurmaEditarTurmas(getNumeroDeTurmasAdicionadasComboTurmaEditarTurmas() + 1);
                           JOptionPane.showMessageDialog(null, "Turma salva com sucesso", "ConfirmaÃ§Ã£o!", JOptionPane.INFORMATION_MESSAGE);
                        }
                     }
                     catch (IOException | ClassNotFoundException ex)
                     {
                        System.err.println(ex);
                     }
                  }
                  else
                  {
                     JOptionPane.showMessageDialog(null, "NÃ£o existem alunos cadastrados", "Erro", JOptionPane.ERROR_MESSAGE);
                  }
               }
               else
                  JOptionPane.showMessageDialog(null, "Adicione algum aluno na lista", "Erro", JOptionPane.ERROR_MESSAGE);
            }
            catch(ClassCastException ex)
            {
               
               System.err.println(ex);
            }
         }
         else
         {
            System.err.println("Falta Ano Letivo");
         }
      }
      else
      {
         System.err.println("Falta Nome da Turma");
      }
   }//GEN-LAST:event_botaoCadastrarActionPerformed

   private void campoAnoLetivoKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_campoAnoLetivoKeyTyped
   {//GEN-HEADEREND:event_campoAnoLetivoKeyTyped
      if(!Character.isDigit(evt.getKeyChar()))
      {
         evt.setKeyChar('\0');
      }
      else
      {
         String textoCampo = campoAnoLetivo.getText();
         if(textoCampo.length() > 3)
            evt.setKeyChar('\0');
      }
   }//GEN-LAST:event_campoAnoLetivoKeyTyped

   private void comboAdicionarAlunoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboAdicionarAlunoPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboAdicionarAlunoPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboAdicionarAluno.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> alunos;
      FileInputStream arquivo;
      File arquivoAlunos = new File("alunos.txt");
      ObjectInputStream in;
      if(isStudentAddedComboAdicionarAluno() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         if(arquivoAlunos.exists())
         {
            try
            {
               arquivo = new FileInputStream(arquivoAlunos);
               in = new ObjectInputStream(arquivo);
               alunos = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboAdicionarAluno.addItem("");
               while(i < alunos.size())
               {
                  comboAdicionarAluno.addItem(alunos.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedComboAdicionarAluno(false);
         setNumeroDeAlunosAdicionadosComboAdicionarAluno(0);
      }
      else
      {
         if(isStudentAddedComboAdicionarAluno() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoAlunos.exists())
            {
               try
               {
                  arquivo = new FileInputStream(arquivoAlunos);
                  in = new ObjectInputStream(arquivo);
                  alunos = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (alunos.size() - getNumeroDeAlunosAdicionadosComboAdicionarAluno());
                  while(i < alunos.size())
                  {
                     comboAdicionarAluno.addItem(alunos.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedComboAdicionarAluno(false);
            setNumeroDeAlunosAdicionadosComboAdicionarAluno(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoAlunos.exists())
               {
                  try
                  {
                     arquivo = new FileInputStream(arquivoAlunos);
                     in = new ObjectInputStream(arquivo);
                     alunos = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboAdicionarAluno.addItem("");
                     while(i < alunos.size())
                     {
                        comboAdicionarAluno.addItem(alunos.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboAdicionarAlunoPopupMenuWillBecomeVisible

   private void comboNomeDoAlunoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboNomeDoAlunoPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboNomeDoAlunoPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboNomeDoAluno.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Aluno> students;
      File arquivoAlunos = new File("alunos.txt");
      FileInputStream arquivo;
      ObjectInputStream in;
      if(isStudentAddedComboNomeDoAluno() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         if(arquivoAlunos.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(arquivoAlunos);
               in = new ObjectInputStream(file);
               students = (ArrayList<dsproject.Aluno>)in.readObject();
               i = 0;
               comboNomeDoAluno.addItem("");
               while(i < students.size())
               {
                  comboNomeDoAluno.addItem(students.get(i).getNome());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setStudentAddedCombonomeDoAluno(false);
         setNumeroDeAlunosAdicionadosComboNomeDoAluno(0);
      }
      else
      {
         if(isStudentAddedComboNomeDoAluno() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoAlunos.exists())
            {
               try
               {
                  arquivo = new FileInputStream(arquivoAlunos);
                  in = new ObjectInputStream(arquivo);
                  students = (ArrayList<dsproject.Aluno>)in.readObject();
                  i = (students.size() - getNumeroDeAlunosAdicionadosComboNomeDoAluno());
                  while(i < students.size())
                  {
                     comboNomeDoAluno.addItem(students.get(i).getNome());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setStudentAddedCombonomeDoAluno(false);
            setNumeroDeAlunosAdicionadosComboNomeDoAluno(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoAlunos.exists())
               {
                  try
                  {
                     arquivo = new FileInputStream(arquivoAlunos);
                     in = new ObjectInputStream(arquivo);
                     students = (ArrayList<dsproject.Aluno>)in.readObject();
                     comboNomeDoAluno.addItem("");
                     while(i < students.size())
                     {
                        comboNomeDoAluno.addItem(students.get(i).getNome());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboNomeDoAlunoPopupMenuWillBecomeVisible

   private void listClassesPanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_listClassesPanelComponentShown
   {//GEN-HEADEREND:event_listClassesPanelComponentShown
      Object isNull;
      isNull = listaListaDeTurmas.getSize();
      int i = 0;
      ArrayList<dsproject.Turma> turmas;
      File arquivoTurmas = new File("turmas.txt");
      ObjectInputStream in;
      if(isTurmaAdicionada() && isNull == 0)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo turmas.txt
         if(arquivoTurmas.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(arquivoTurmas);
               in = new ObjectInputStream(file);
               turmas = (ArrayList<dsproject.Turma>)in.readObject();
               i = 0;
               while(i < turmas.size())
               {
                  listaListaDeTurmas.addElement(turmas.get(i).getId());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setTurmaAdicionada(false);
         setNumeroDeTurmasAdicionadas(0);
      }
      else
      {
         if(isTurmaAdicionada() && isNull != 0)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoTurmas.exists())
            {
               FileInputStream arquivo;
               try
               {
                  arquivo = new FileInputStream(arquivoTurmas);
                  in = new ObjectInputStream(arquivo);
                  turmas = (ArrayList<dsproject.Turma>)in.readObject();
                  i = (turmas.size() - getNumeroDeTurmasAdicionadas());
                  while(i < turmas.size())
                  {
                     listaListaDeTurmas.addElement(turmas.get(i).getId());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setTurmaAdicionada(false);
            setNumeroDeTurmasAdicionadas(0);
         }
         else
         {
            if(isNull == 0)
            {
               i = 0;
               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoTurmas.exists())
               {
                  FileInputStream arquivo;
                  try
                  {
                     arquivo = new FileInputStream(arquivoTurmas);
                     in = new ObjectInputStream(arquivo);
                     turmas = (ArrayList<dsproject.Turma>)in.readObject();
                     while(i < turmas.size())
                     {
                        listaListaDeTurmas.addElement(turmas.get(i).getId());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
               else
               {
                  JOptionPane.showMessageDialog(null, "NÃ£o existe nenhuma turma cadastrada", "Erro", JOptionPane.ERROR_MESSAGE);
               }
            }
         }
      }
   }//GEN-LAST:event_listClassesPanelComponentShown

   private void comboTurmaEditarTurmaPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboTurmaEditarTurmaPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboTurmaEditarTurmaPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboTurmaEditarTurma.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Turma> turmas;
      File arquivoTurmas = new File("turmas.txt");
      FileInputStream arquivo;
      ObjectInputStream in;
      if(isTurmaAdicionadaComboTurmaEditarTurmas() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         if(arquivoTurmas.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(arquivoTurmas);
               in = new ObjectInputStream(file);
               turmas = (ArrayList<dsproject.Turma>)in.readObject();
               i = 0;
               comboTurmaEditarTurma.addItem("");
               while(i < turmas.size())
               {
                  comboTurmaEditarTurma.addItem(turmas.get(i).getId());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setTurmaAdicionadaComboTurmaEditarTurmas(false);
         setNumeroDeTurmasAdicionadasComboTurmaEditarTurmas(0);
      }
      else
      {
         if(isTurmaAdicionadaComboTurmaEditarTurmas()&& isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoTurmas.exists())
            {
               try
               {
                  arquivo = new FileInputStream(arquivoTurmas);
                  in = new ObjectInputStream(arquivo);
                  turmas = (ArrayList<dsproject.Turma>)in.readObject();
                  i = (turmas.size() - getNumeroDeTurmasAdicionadasComboTurmaEditarTurmas());
                  while(i < turmas.size())
                  {
                     comboTurmaEditarTurma.addItem(turmas.get(i).getId());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setTurmaAdicionadaComboTurmaEditarTurmas(false);
            setNumeroDeTurmasAdicionadasComboTurmaEditarTurmas(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoTurmas.exists())
               {
                  try
                  {
                     arquivo = new FileInputStream(arquivoTurmas);
                     in = new ObjectInputStream(arquivo);
                     turmas = (ArrayList<dsproject.Turma>)in.readObject();
                     comboTurmaEditarTurma.addItem("");
                     while(i < turmas.size())
                     {
                        comboTurmaEditarTurma.addItem(turmas.get(i).getId());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboTurmaEditarTurmaPopupMenuWillBecomeVisible

   private void comboTurmaEditarTurmaItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_comboTurmaEditarTurmaItemStateChanged
   {//GEN-HEADEREND:event_comboTurmaEditarTurmaItemStateChanged
      limpaCamposEditarTurma();
      int i;
      int y;
      Object isNull;
      isNull = comboRemoverAluno.getItemAt(0);
      ArrayList<dsproject.Turma> turmas;
      File arquivoTurmas = new File("turmas.txt");
      ObjectInputStream in;
      
      if (evt.getStateChange() == 1)
      {
         if(evt.getItem().equals(""))
         {
            System.out.println("espaÃ§o em branco"); 
         }
         else
         {
            if(arquivoTurmas.exists())
            {
               FileInputStream file;
               try
               {
                  file = new FileInputStream(arquivoTurmas);
                  in = new ObjectInputStream(file);
                  turmas = (ArrayList<dsproject.Turma>)in.readObject();
                  if(isNull == null)
                     comboRemoverAluno.addItem("");
                  i = 0;
                  while(i < turmas.size())
                  {
                     if(turmas.get(i).getId().equals(evt.getItem().toString()))
                     {
                        campoAnoLetivoEditarTurma.setText(String.valueOf(turmas.get(i).getAno()));
                        for(y = 0; y < turmas.get(i).buscaTodosAlunos().size(); y++)
                        {
                           comboRemoverAluno.addItem(turmas.get(i).buscaTodosAlunos().get(y).getNome());
                        }
                     }
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }
            }
            else
            {
               JOptionPane.showMessageDialog(null, "NÃ£o existe nenhuma turma cadastrada", "Erro", JOptionPane.ERROR_MESSAGE);
            }
         }
      }
   }//GEN-LAST:event_comboTurmaEditarTurmaItemStateChanged

   private void comboTurmaPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_comboTurmaPopupMenuWillBecomeVisible
   {//GEN-HEADEREND:event_comboTurmaPopupMenuWillBecomeVisible
      Object isNull;
      isNull = comboTurma.getItemAt(0);
      int i = 0;
      ArrayList<dsproject.Turma> turmas;
      File arquivoTurmas = new File("turmas.txt");
      FileInputStream arquivo;
      ObjectInputStream in;
      if(isTurmaAdicionadaComboTurma() && isNull == null)
      {
         //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
         if(arquivoTurmas.exists())
         {
            FileInputStream file;
            try
            {
               file = new FileInputStream(arquivoTurmas);
               in = new ObjectInputStream(file);
               turmas = (ArrayList<dsproject.Turma>)in.readObject();
               i = 0;
               comboTurma.addItem("");
               while(i < turmas.size())
               {
                  comboTurma.addItem(turmas.get(i).getId());
                  i++;
               }
            }
            catch (IOException | ClassNotFoundException ex)
            {
               System.err.println(ex);
            }

         }
         setTurmaAdicionadaComboTurma(false);
         setNumeroDeTurmasAdicionadasComboTurma(0);
      }
      else
      {
         if(isTurmaAdicionadaComboTurma() && isNull != null)
         {
            //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
            if(arquivoTurmas.exists())
            {
               try
               {
                  arquivo = new FileInputStream(arquivoTurmas);
                  in = new ObjectInputStream(arquivo);
                  turmas = (ArrayList<dsproject.Turma>)in.readObject();
                  i = (turmas.size() - getNumeroDeTurmasAdicionadasComboTurma());
                  while(i < turmas.size())
                  {
                     comboTurma.addItem(turmas.get(i).getId());
                     i++;
                  }
               }
               catch (IOException | ClassNotFoundException ex)
               {
                  System.err.println(ex);
               }

            }
            setTurmaAdicionadaComboTurma(false);
            setNumeroDeTurmasAdicionadasComboTurma(0);
         }
         else
         {
            if(isNull == null)
            {
               i = 0;

               //daqui atÃ© o catch le um objeto gravado no arquivo alunos.txt
               if(arquivoTurmas.exists())
               {
                  try
                  {
                     arquivo = new FileInputStream(arquivoTurmas);
                     in = new ObjectInputStream(arquivo);
                     turmas = (ArrayList<dsproject.Turma>)in.readObject();
                     comboTurma.addItem("");
                     while(i < turmas.size())
                     {
                        comboTurma.addItem(turmas.get(i).getId());
                        i++;
                     }
                  }
                  catch (IOException | ClassNotFoundException ex)
                  {
                     System.err.println(ex);
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_comboTurmaPopupMenuWillBecomeVisible

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private static javax.swing.JButton botaoAdicionar;
   private javax.swing.JButton botaoAdicionarEditarTurma;
   private javax.swing.JButton botaoCadastrar;
   private javax.swing.JButton botaoRemover;
   private javax.swing.JButton botaoRemoverAluno;
   private javax.swing.JButton botaoRemoverEditarTurma;
   private javax.swing.JButton botaoSalvar;
   private javax.swing.ButtonGroup buttonGroup1;
   private static javax.swing.JTextField campoAnoLetivo;
   private javax.swing.JTextField campoAnoLetivoEditarTurma;
   private static javax.swing.JTextField campoTurma;
   private static javax.swing.JComboBox comboAdicionarAluno;
   private static javax.swing.JComboBox comboAluno;
   private javax.swing.JComboBox comboNomeDoAluno;
   private javax.swing.JComboBox comboRemoverAluno;
   private javax.swing.JComboBox comboTurma;
   private javax.swing.JComboBox comboTurmaEditarTurma;
   private javax.swing.JPanel deleteClassPanel;
   private javax.swing.JPanel editClassPanel;
   private javax.swing.JPanel findClassPanel;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JLabel labelAluno;
   private static javax.swing.JLabel labelAnoLetivo;
   private javax.swing.JLabel labelAnoLetivoEditarTurma;
   private javax.swing.JLabel labelNomeDoAluno;
   private static javax.swing.JLabel labelTurma;
   private javax.swing.JLabel labelTurmaBuscarTurmaPorAluno;
   private javax.swing.JLabel labelTurmaEditarTurma;
   private javax.swing.JLabel labelTurmaRemoverTurma;
   private javax.swing.JPanel listClassesPanel;
   private static javax.swing.JList listaAlunosMatriculadosNaTurma;
   private javax.swing.JList listaDeTurmas;
   private javax.swing.JPanel newClassPanel;
   private javax.swing.JLabel returnClassLabel;
   // End of variables declaration//GEN-END:variables
   private static DefaultListModel listaAlunosMatriculados;
   private static DefaultListModel listaListaDeTurmas;
   private static boolean alunoAdicionadoComboAluno;
   private static boolean alunoAdicionadoComboNomeDoAluno;
   private static boolean alunoAdicionadoComboAdicionarAluno;
   private static boolean turmaAdicionada;
   private static boolean turmaAdicionadaComboTurmaEditarTurmas;
   private static boolean turmaAdicionadaComboTurma;
   private static int numeroDeTurmasAdicionadasComboTurma = 0;
   private static int numeroDeTurmasAdicionadasComboTurmaEditarTurmas = 0;
   private static int numeroDeTurmasAdicionadas = 0;
   private static int numeroDeAlunosAdicionadosComboAluno = 0;
   private static int numeroDeAlunosAdicionadosComboNomeDoAluno = 0;
   private static int numeroDeAlunosAdicionadosComboAdicionarAluno = 0;

   public static boolean isTurmaAdicionadaComboTurma()
   {
      return turmaAdicionadaComboTurma;
   }

   public static void setTurmaAdicionadaComboTurma(boolean turmaAdicionadaComboTurma)
   {
      ClassPanel.turmaAdicionadaComboTurma = turmaAdicionadaComboTurma;
   }

   public static int getNumeroDeTurmasAdicionadasComboTurma()
   {
      return numeroDeTurmasAdicionadasComboTurma;
   }

   public static void setNumeroDeTurmasAdicionadasComboTurma(int numeroDeTurmasAdicionadasComboTurma)
   {
      ClassPanel.numeroDeTurmasAdicionadasComboTurma = numeroDeTurmasAdicionadasComboTurma;
   }
   
   public static boolean isTurmaAdicionadaComboTurmaEditarTurmas()
   {
      return turmaAdicionadaComboTurmaEditarTurmas;
   }

   public static void setTurmaAdicionadaComboTurmaEditarTurmas(boolean turmaAdicionadaEditarTurmas)
   {
      ClassPanel.turmaAdicionadaComboTurmaEditarTurmas = turmaAdicionadaEditarTurmas;
   }

   public static int getNumeroDeTurmasAdicionadasComboTurmaEditarTurmas()
   {
      return numeroDeTurmasAdicionadasComboTurmaEditarTurmas;
   }

   public static void setNumeroDeTurmasAdicionadasComboTurmaEditarTurmas(int numeroDeTurmasAdicionadasEditarTurmas)
   {
      ClassPanel.numeroDeTurmasAdicionadasComboTurmaEditarTurmas = numeroDeTurmasAdicionadasEditarTurmas;
   }
   
   public static boolean isTurmaAdicionada()
   {
      return turmaAdicionada;
   }

   public static void setTurmaAdicionada(boolean turmaAdicionada)
   {
      ClassPanel.turmaAdicionada = turmaAdicionada;
   }

   public static int getNumeroDeTurmasAdicionadas()
   {
      return numeroDeTurmasAdicionadas;
   }

   public static void setNumeroDeTurmasAdicionadas(int numeroDeTurmasAdicionadas)
   {
      ClassPanel.numeroDeTurmasAdicionadas = numeroDeTurmasAdicionadas;
   }
   
   public static int getNumeroDeAlunosAdicionadosComboAluno()
   {
      return numeroDeAlunosAdicionadosComboAluno;
   }

   public static void setNumeroDeAlunosAdicionadosComboAluno(int numeroDeAlunosAdicionadosComboStudent)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboAluno = numeroDeAlunosAdicionadosComboStudent;
   }

   public static int getNumeroDeAlunosAdicionadosComboNomeDoAluno()
   {
      return numeroDeAlunosAdicionadosComboNomeDoAluno;
   }

   public static void setNumeroDeAlunosAdicionadosComboNomeDoAluno(int numeroDeAlunosAdicionadosComboStudentName)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboNomeDoAluno = numeroDeAlunosAdicionadosComboStudentName;
   }

   public static int getNumeroDeAlunosAdicionadosComboAdicionarAluno()
   {
      return numeroDeAlunosAdicionadosComboAdicionarAluno;
   }

   public static void setNumeroDeAlunosAdicionadosComboAdicionarAluno(int numeroDeAlunosAdicionadosComboAddStudent)
   {
      ClassPanel.numeroDeAlunosAdicionadosComboAdicionarAluno = numeroDeAlunosAdicionadosComboAddStudent;
   }
   
   public static boolean isStudentAddedComboAluno()
   {
      return alunoAdicionadoComboAluno;
   }

   public static boolean isStudentAddedComboNomeDoAluno()
   {
      return alunoAdicionadoComboNomeDoAluno;
   }

   public static boolean isStudentAddedComboAdicionarAluno()
   {
      return alunoAdicionadoComboAdicionarAluno;
   }

   public static void setStudentAddedCombonomeDoAluno(boolean studentAddedComboStudentName)
   {
      ClassPanel.alunoAdicionadoComboNomeDoAluno = studentAddedComboStudentName;
   }

   public static void setStudentAddedComboAdicionarAluno(boolean studentAddedComboAddStudent)
   {
      ClassPanel.alunoAdicionadoComboAdicionarAluno = studentAddedComboAddStudent;
   }
   
   public static void setStudentAddedComboAluno(boolean studentAdded)
   {
      ClassPanel.alunoAdicionadoComboAluno = studentAdded;
   }

   public static String getCampoTurma()
   {
      if(campoTurma.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um nome para a " + labelTurma.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return campoTurma.getText();
      }
   }

   public static String getCampoAnoLetivo()
   {
      if(campoAnoLetivo.getText().isEmpty())
      {
         JOptionPane.showMessageDialog(null, "Digite um " + labelAnoLetivo.getText(), "Erro", JOptionPane.ERROR_MESSAGE);
         return null;
      }
      else
      {
         return campoAnoLetivo.getText();
      }
   }
   
   public void limpaCamposEditarTurma()
   {
      campoAnoLetivoEditarTurma.setText("");
      comboRemoverAluno.removeAllItems();
   }
}
